{"ast":null,"code":"// authController.js\nconst {\n  Datastore\n} = require('@google-cloud/datastore');\nconst {\n  generarJWT\n} = require('../helpers/generadorJWT');\nconst admin = require('firebase-admin');\n\n// Inicializar Datastore\nconst datastore = new Datastore({\n  projectId: 'equipo1-ecommerce',\n  keyFilename: './credentials/firebase-key.json'\n});\n\n// Inicializar Firebase Admin\nconst serviceAccount = require('../credentials/firebase-key.json');\nadmin.initializeApp({\n  credential: admin.credential.cert(serviceAccount)\n});\nconst login = async (req, res) => {\n  const {\n    firebaseToken\n  } = req.body;\n  try {\n    // Verificar el token de Firebase\n    const decodedToken = await admin.auth().verifyIdToken(firebaseToken);\n    const {\n      uid,\n      name,\n      email\n    } = decodedToken;\n\n    // Verificar si el usuario existe en Datastore\n    const query = datastore.createQuery('Usuario').filter('email', '=', email);\n    const [users] = await datastore.runQuery(query);\n    let user;\n    if (users.length > 0) {\n      // Usuario encontrado\n      user = users[0];\n    } else {\n      // Crear un nuevo usuario si no existe\n      const usuarioKey = datastore.key('Usuario');\n      user = {\n        nombre: name || 'Usuario',\n        email,\n        esAdmin: false,\n        fechaRegistro: new Date()\n      };\n      await datastore.save({\n        key: usuarioKey,\n        data: user\n      });\n      user.id = usuarioKey.id;\n    }\n\n    // Generar un JWT personalizado\n    const token = await generarJWT(user.id, user.nombre);\n    res.json({\n      ok: true,\n      usuario: {\n        id: user.id,\n        nombre: user.nombre,\n        email: user.email,\n        esAdmin: user.esAdmin\n      },\n      token\n    });\n  } catch (error) {\n    console.error('Error en el login:', error);\n    res.status(500).json({\n      ok: false,\n      msg: 'Error al autenticar el usuario'\n    });\n  }\n};\nmodule.exports = {\n  login\n};","map":{"version":3,"names":["Datastore","require","generarJWT","admin","datastore","projectId","keyFilename","serviceAccount","initializeApp","credential","cert","login","req","res","firebaseToken","body","decodedToken","auth","verifyIdToken","uid","name","email","query","createQuery","filter","users","runQuery","user","length","usuarioKey","key","nombre","esAdmin","fechaRegistro","Date","save","data","id","token","json","ok","usuario","error","console","status","msg","module","exports"],"sources":["C:/Users/guill/OneDrive/Documents/UADE/TP/equipo1-ecommerce/equipo1-ecommerce/src/components/Login/Auth.js"],"sourcesContent":["// authController.js\r\nconst { Datastore } = require('@google-cloud/datastore');\r\nconst { generarJWT } = require('../helpers/generadorJWT');\r\nconst admin = require('firebase-admin');\r\n\r\n// Inicializar Datastore\r\nconst datastore = new Datastore({\r\n  projectId: 'equipo1-ecommerce',\r\n  keyFilename: './credentials/firebase-key.json'\r\n});\r\n\r\n// Inicializar Firebase Admin\r\nconst serviceAccount = require('../credentials/firebase-key.json');\r\nadmin.initializeApp({\r\n  credential: admin.credential.cert(serviceAccount),\r\n});\r\n\r\nconst login = async (req, res) => {\r\n  const { firebaseToken } = req.body;\r\n\r\n  try {\r\n    // Verificar el token de Firebase\r\n    const decodedToken = await admin.auth().verifyIdToken(firebaseToken);\r\n    const { uid, name, email } = decodedToken;\r\n\r\n    // Verificar si el usuario existe en Datastore\r\n    const query = datastore.createQuery('Usuario').filter('email', '=', email);\r\n    const [users] = await datastore.runQuery(query);\r\n    let user;\r\n\r\n    if (users.length > 0) {\r\n      // Usuario encontrado\r\n      user = users[0];\r\n    } else {\r\n      // Crear un nuevo usuario si no existe\r\n      const usuarioKey = datastore.key('Usuario');\r\n      user = {\r\n        nombre: name || 'Usuario',\r\n        email,\r\n        esAdmin: false,\r\n        fechaRegistro: new Date(),\r\n      };\r\n      await datastore.save({\r\n        key: usuarioKey,\r\n        data: user,\r\n      });\r\n      user.id = usuarioKey.id;\r\n    }\r\n\r\n    // Generar un JWT personalizado\r\n    const token = await generarJWT(user.id, user.nombre);\r\n\r\n    res.json({\r\n      ok: true,\r\n      usuario: { id: user.id, nombre: user.nombre, email: user.email, esAdmin: user.esAdmin },\r\n      token,\r\n    });\r\n  } catch (error) {\r\n    console.error('Error en el login:', error);\r\n    res.status(500).json({\r\n      ok: false,\r\n      msg: 'Error al autenticar el usuario',\r\n    });\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  login,\r\n};\r\n"],"mappings":"AAAA;AACA,MAAM;EAAEA;AAAU,CAAC,GAAGC,OAAO,CAAC,yBAAyB,CAAC;AACxD,MAAM;EAAEC;AAAW,CAAC,GAAGD,OAAO,CAAC,yBAAyB,CAAC;AACzD,MAAME,KAAK,GAAGF,OAAO,CAAC,gBAAgB,CAAC;;AAEvC;AACA,MAAMG,SAAS,GAAG,IAAIJ,SAAS,CAAC;EAC9BK,SAAS,EAAE,mBAAmB;EAC9BC,WAAW,EAAE;AACf,CAAC,CAAC;;AAEF;AACA,MAAMC,cAAc,GAAGN,OAAO,CAAC,kCAAkC,CAAC;AAClEE,KAAK,CAACK,aAAa,CAAC;EAClBC,UAAU,EAAEN,KAAK,CAACM,UAAU,CAACC,IAAI,CAACH,cAAc;AAClD,CAAC,CAAC;AAEF,MAAMI,KAAK,GAAG,MAAAA,CAAOC,GAAG,EAAEC,GAAG,KAAK;EAChC,MAAM;IAAEC;EAAc,CAAC,GAAGF,GAAG,CAACG,IAAI;EAElC,IAAI;IACF;IACA,MAAMC,YAAY,GAAG,MAAMb,KAAK,CAACc,IAAI,CAAC,CAAC,CAACC,aAAa,CAACJ,aAAa,CAAC;IACpE,MAAM;MAAEK,GAAG;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAGL,YAAY;;IAEzC;IACA,MAAMM,KAAK,GAAGlB,SAAS,CAACmB,WAAW,CAAC,SAAS,CAAC,CAACC,MAAM,CAAC,OAAO,EAAE,GAAG,EAAEH,KAAK,CAAC;IAC1E,MAAM,CAACI,KAAK,CAAC,GAAG,MAAMrB,SAAS,CAACsB,QAAQ,CAACJ,KAAK,CAAC;IAC/C,IAAIK,IAAI;IAER,IAAIF,KAAK,CAACG,MAAM,GAAG,CAAC,EAAE;MACpB;MACAD,IAAI,GAAGF,KAAK,CAAC,CAAC,CAAC;IACjB,CAAC,MAAM;MACL;MACA,MAAMI,UAAU,GAAGzB,SAAS,CAAC0B,GAAG,CAAC,SAAS,CAAC;MAC3CH,IAAI,GAAG;QACLI,MAAM,EAAEX,IAAI,IAAI,SAAS;QACzBC,KAAK;QACLW,OAAO,EAAE,KAAK;QACdC,aAAa,EAAE,IAAIC,IAAI,CAAC;MAC1B,CAAC;MACD,MAAM9B,SAAS,CAAC+B,IAAI,CAAC;QACnBL,GAAG,EAAED,UAAU;QACfO,IAAI,EAAET;MACR,CAAC,CAAC;MACFA,IAAI,CAACU,EAAE,GAAGR,UAAU,CAACQ,EAAE;IACzB;;IAEA;IACA,MAAMC,KAAK,GAAG,MAAMpC,UAAU,CAACyB,IAAI,CAACU,EAAE,EAAEV,IAAI,CAACI,MAAM,CAAC;IAEpDlB,GAAG,CAAC0B,IAAI,CAAC;MACPC,EAAE,EAAE,IAAI;MACRC,OAAO,EAAE;QAAEJ,EAAE,EAAEV,IAAI,CAACU,EAAE;QAAEN,MAAM,EAAEJ,IAAI,CAACI,MAAM;QAAEV,KAAK,EAAEM,IAAI,CAACN,KAAK;QAAEW,OAAO,EAAEL,IAAI,CAACK;MAAQ,CAAC;MACvFM;IACF,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC1C7B,GAAG,CAAC+B,MAAM,CAAC,GAAG,CAAC,CAACL,IAAI,CAAC;MACnBC,EAAE,EAAE,KAAK;MACTK,GAAG,EAAE;IACP,CAAC,CAAC;EACJ;AACF,CAAC;AAEDC,MAAM,CAACC,OAAO,GAAG;EACfpC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}