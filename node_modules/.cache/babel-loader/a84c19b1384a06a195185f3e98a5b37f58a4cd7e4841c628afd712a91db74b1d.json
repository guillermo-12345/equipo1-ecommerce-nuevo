{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\guill\\\\OneDrive\\\\Documents\\\\UADE\\\\TP\\\\equipo1-ecommerce\\\\equipo1-ecommerce\\\\src\\\\components\\\\Login\\\\Protected.js\",\n  _s = $RefreshSig$();\nimport axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Protected = () => {\n  _s();\n  const [users, setUsers] = useState([]);\n  useEffect(() => {\n    axios.get(\"http://localhost:3001/usuario\").then(response => {\n      setUsers(response.data.usuarios);\n    }).catch(error => {\n      console.error(error);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Lista de Usuarios\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Nombre\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: users.map(user => {\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: user.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: user.email\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 29\n            }, this)]\n          }, user.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 25\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n};\n\n/* import React, { useState, useEffect, useRef } from 'react';\r\nimport { classNames } from 'primereact/utils';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\nimport { Toast } from 'primereact/toast';\r\nimport { Button } from 'primereact/button';\r\nimport { FileUpload } from 'primereact/fileupload';\r\nimport { Rating } from 'primereact/rating';\r\nimport { Toolbar } from 'primereact/toolbar';\r\nimport { InputTextarea } from 'primereact/inputtextarea';\r\nimport { IconField } from 'primereact/iconfield';\r\nimport { InputIcon } from 'primereact/inputicon';\r\nimport { RadioButton } from 'primereact/radiobutton';\r\nimport { InputNumber } from 'primereact/inputnumber';\r\nimport { Dialog } from 'primereact/dialog';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { Tag } from 'primereact/tag';\r\nimport axios from 'axios';\r\nimport {collection, getDocs, addDoc, deleteDoc, doc, updateDoc, query} from 'firebase/firestore';\r\nimport { db } from '../config/firebase';\r\n\r\n\r\nexport default function Protected() {\r\n    let emptyProduct = {\r\n        id: null,\r\n        name: '',\r\n        image: null,\r\n        description: '',\r\n        category: null,\r\n        price: 0,\r\n        quantity: 0,\r\n        rating: 0,\r\n        inventoryStatus: 'INSTOCK'\r\n    };\r\n\r\n    const [products, setProducts] = useState(null);\r\n    const [productDialog, setProductDialog] = useState(false);\r\n    const [deleteProductDialog, setDeleteProductDialog] = useState(false);\r\n    const [deleteProductsDialog, setDeleteProductsDialog] = useState(false);\r\n    const [product, setProduct] = useState(emptyProduct);\r\n    const [selectedProducts, setSelectedProducts] = useState(null);\r\n    const [submitted, setSubmitted] = useState(false);\r\n    const [globalFilter, setGlobalFilter] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const toast = useRef(null);\r\n    const dt = useRef(null);\r\n\r\n    const fetchProductos = async () => {\r\n\r\n      setLoading(true)\r\n      const productsQuery = query(collection(db, 'productos'))\r\n      const productsSnapshot = await getDocs(productsQuery)\r\n\r\n      const prodList = productsSnapshot.docs.map(doc => {\r\n        return {\r\n          ...doc.data(),\r\n          id: doc.id\r\n        }\r\n      }) \r\n\r\n      setProducts(prodList)\r\n\r\n      setLoading(false)\r\n  }\r\n\r\n    useEffect(() => {\r\n      fetchProductos()\r\n    }, []);\r\n\r\n    const formatCurrency = (value) => {\r\n        return value.toLocaleString('en-US', { style: 'currency', currency: 'USD' });\r\n    };\r\n\r\n    const openNew = () => {\r\n        setProduct(emptyProduct);\r\n        setSubmitted(false);\r\n        setProductDialog(true);\r\n    };\r\n\r\n    const hideDialog = () => {\r\n        setSubmitted(false);\r\n        setProductDialog(false);\r\n    };\r\n\r\n    const hideDeleteProductDialog = () => {\r\n        setDeleteProductDialog(false);\r\n    };\r\n\r\n    const hideDeleteProductsDialog = () => {\r\n        setDeleteProductsDialog(false);\r\n    };\r\n\r\n    const saveProduct = async () => {\r\n        setSubmitted(true);\r\n        setLoading(true)\r\n        setProductDialog(false)\r\n        if (!product.id) {\r\n          await addDoc(collection(db, 'productos'), product)\r\n        } else {\r\n          await updateDoc(doc(db, 'productos', product.id), product)\r\n        }\r\n\r\n\r\n        toast.current.show({ severity: 'success', summary: 'Successful', detail: 'Product Created', life: 3000 });\r\n        setLoading(false)\r\n\r\n        fetchProductos()\r\n    };\r\n\r\n    const editProduct = (product) => {\r\n        setProduct({ ...product });\r\n        setProductDialog(true);\r\n    };\r\n\r\n    const confirmDeleteProduct = (product) => {\r\n        setProduct(product);\r\n        setDeleteProductDialog(true);\r\n    };\r\n\r\n    const deleteProduct = async () => {\r\n      setLoading(true)\r\n        let _products = products.filter((val) => val.id !== product.id);\r\n\r\n        setProducts(_products);\r\n        setDeleteProductDialog(false);\r\n        setProduct(emptyProduct);\r\n\r\n        await deleteDoc(doc(db, 'productos', product.id))\r\n\r\n\r\n        toast.current.show({ severity: 'success', summary: 'Successful', detail: 'Product Deleted', life: 3000 });\r\n        setLoading(false)\r\n        fetchProductos()\r\n\r\n    };\r\n\r\n    const findIndexById = (id) => {\r\n        let index = -1;\r\n\r\n        for (let i = 0; i < products.length; i++) {\r\n            if (products[i].id === id) {\r\n                index = i;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return index;\r\n    };\r\n\r\n    const createId = () => {\r\n        let id = '';\r\n        let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n\r\n        for (let i = 0; i < 5; i++) {\r\n            id += chars.charAt(Math.floor(Math.random() * chars.length));\r\n        }\r\n\r\n        return id;\r\n    };\r\n\r\n    const exportCSV = () => {\r\n        dt.current.exportCSV();\r\n    };\r\n\r\n    const confirmDeleteSelected = () => {\r\n        setDeleteProductsDialog(true);\r\n    };\r\n\r\n    const deleteSelectedProducts = () => {\r\n        let _products = products.filter((val) => !selectedProducts.includes(val));\r\n\r\n        setProducts(_products);\r\n        setDeleteProductsDialog(false);\r\n        setSelectedProducts(null);\r\n        toast.current.show({ severity: 'success', summary: 'Successful', detail: 'Products Deleted', life: 3000 });\r\n    };\r\n\r\n    const onCategoryChange = (e) => {\r\n        let _product = { ...product };\r\n\r\n        _product['category'] = e.value;\r\n        setProduct(_product);\r\n    };\r\n\r\n    const onInputChange = (e, name) => {\r\n        const val = (e.target && e.target.value) || '';\r\n        let _product = { ...product };\r\n\r\n        _product[`${name}`] = val;\r\n\r\n        setProduct(_product);\r\n    };\r\n\r\n    const onInputNumberChange = (e, name) => {\r\n        const val = e.value || 0;\r\n        let _product = { ...product };\r\n\r\n        _product[`${name}`] = val;\r\n\r\n        setProduct(_product);\r\n    };\r\n\r\n    const leftToolbarTemplate = () => {\r\n        return (\r\n            <div className=\"flex flex-wrap gap-2\">\r\n                <Button label=\"New\" icon=\"pi pi-plus\" severity=\"success\" onClick={openNew} />\r\n                <Button label=\"Delete\" icon=\"pi pi-trash\" severity=\"danger\" onClick={confirmDeleteSelected} disabled={!selectedProducts || !selectedProducts.length} />\r\n            </div>\r\n        );\r\n    };\r\n\r\n    const rightToolbarTemplate = () => {\r\n        return <Button label=\"Export\" icon=\"pi pi-upload\" className=\"p-button-help\" onClick={exportCSV} />;\r\n    };\r\n\r\n    const imageBodyTemplate = (rowData) => {\r\n        return <img src={`https://primefaces.org/cdn/primereact/images/product/${rowData.image}`} alt={rowData.image} className=\"shadow-2 border-round\" style={{ width: '64px' }} />;\r\n    };\r\n\r\n    const priceBodyTemplate = (rowData) => {\r\n        return formatCurrency(rowData.price);\r\n    };\r\n\r\n    const ratingBodyTemplate = (rowData) => {\r\n        return <Rating value={rowData.rating} readOnly cancel={false} />;\r\n    };\r\n\r\n    const statusBodyTemplate = (rowData) => {\r\n        return <Tag value={rowData.inventoryStatus} severity={getSeverity(rowData)}></Tag>;\r\n    };\r\n\r\n    const actionBodyTemplate = (rowData) => {\r\n        return (\r\n            <React.Fragment>\r\n                <Button icon=\"pi pi-pencil\" rounded outlined className=\"mr-2\" onClick={() => editProduct(rowData)} />\r\n                <Button icon=\"pi pi-trash\" rounded outlined severity=\"danger\" onClick={() => confirmDeleteProduct(rowData)} />\r\n            </React.Fragment>\r\n        );\r\n    };\r\n\r\n    const getSeverity = (product) => {\r\n        switch (product.inventoryStatus) {\r\n            case 'INSTOCK':\r\n                return 'success';\r\n\r\n            case 'LOWSTOCK':\r\n                return 'warning';\r\n\r\n            case 'OUTOFSTOCK':\r\n                return 'danger';\r\n\r\n            default:\r\n                return null;\r\n        }\r\n    };\r\n\r\n    const header = (\r\n        <div className=\"flex flex-wrap gap-2 align-items-center justify-content-between\">\r\n            <h4 className=\"m-0\">Manage Products</h4>\r\n            <IconField iconPosition=\"left\">\r\n                <InputIcon className=\"pi pi-search\" />\r\n                <InputText type=\"search\" onInput={(e) => setGlobalFilter(e.target.value)} placeholder=\"Search...\" />\r\n            </IconField>\r\n        </div>\r\n    );\r\n    const productDialogFooter = (\r\n        <React.Fragment>\r\n            <Button label=\"Cancel\" icon=\"pi pi-times\" outlined onClick={hideDialog} />\r\n            <Button label=\"Save\" icon=\"pi pi-check\" onClick={saveProduct} />\r\n        </React.Fragment>\r\n    );\r\n    const deleteProductDialogFooter = (\r\n        <React.Fragment>\r\n            <Button label=\"No\" icon=\"pi pi-times\" outlined onClick={hideDeleteProductDialog} />\r\n            <Button label=\"Yes\" icon=\"pi pi-check\" severity=\"danger\" onClick={deleteProduct} />\r\n        </React.Fragment>\r\n    );\r\n    const deleteProductsDialogFooter = (\r\n        <React.Fragment>\r\n            <Button label=\"No\" icon=\"pi pi-times\" outlined onClick={hideDeleteProductsDialog} />\r\n            <Button label=\"Yes\" icon=\"pi pi-check\" severity=\"danger\" onClick={deleteSelectedProducts} />\r\n        </React.Fragment>\r\n    );\r\n\r\n    return (\r\n        <div>\r\n            <Toast ref={toast} />\r\n            <div className=\"card\">\r\n                <Toolbar className=\"mb-4\" left={leftToolbarTemplate} right={rightToolbarTemplate}></Toolbar>\r\n\r\n                <DataTable ref={dt} value={products} selection={selectedProducts} onSelectionChange={(e) => setSelectedProducts(e.value)}\r\n                        dataKey=\"id\"  paginator rows={10} rowsPerPageOptions={[5, 10, 25]} loading={loading}\r\n                        paginatorTemplate=\"FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown\"\r\n                        currentPageReportTemplate=\"Showing {first} to {last} of {totalRecords} products\" globalFilter={globalFilter} header={header}>\r\n                    <Column selectionMode=\"multiple\" exportable={false}></Column>\r\n                    <Column field=\"code\" header=\"Code\" sortable style={{ minWidth: '12rem' }}></Column>\r\n                    <Column field=\"name\" header=\"Name\" sortable style={{ minWidth: '16rem' }}></Column>\r\n                    <Column field=\"image\" header=\"Image\" body={imageBodyTemplate}></Column>\r\n                    <Column field=\"price\" header=\"Price\" body={priceBodyTemplate} sortable style={{ minWidth: '8rem' }}></Column>\r\n                    <Column field=\"category\" header=\"Category\" sortable style={{ minWidth: '10rem' }}></Column>\r\n                    <Column field=\"rating\" header=\"Reviews\" body={ratingBodyTemplate} sortable style={{ minWidth: '12rem' }}></Column>\r\n                    <Column field=\"inventoryStatus\" header=\"Status\" body={statusBodyTemplate} sortable style={{ minWidth: '12rem' }}></Column>\r\n                    <Column body={actionBodyTemplate} exportable={false} style={{ minWidth: '12rem' }}></Column>\r\n                </DataTable>\r\n            </div>\r\n\r\n            <Dialog visible={productDialog} style={{ width: '32rem' }} breakpoints={{ '960px': '75vw', '641px': '90vw' }} header=\"Product Details\" modal className=\"p-fluid\" footer={productDialogFooter} onHide={hideDialog}>\r\n                {product.image && <img src={`https://primefaces.org/cdn/primereact/images/product/${product.image}`} alt={product.image} className=\"product-image block m-auto pb-3\" />}\r\n                <div className=\"field\">\r\n                    <label htmlFor=\"name\" className=\"font-bold\">\r\n                        Name\r\n                    </label>\r\n                    <InputText id=\"name\" value={product.name} onChange={(e) => onInputChange(e, 'name')} required autoFocus className={classNames({ 'p-invalid': submitted && !product.name })} />\r\n                    {submitted && !product.name && <small className=\"p-error\">Name is required.</small>}\r\n                </div>\r\n                <div className=\"field\">\r\n                    <label htmlFor=\"description\" className=\"font-bold\">\r\n                        Description\r\n                    </label>\r\n                    <InputTextarea id=\"description\" value={product.description} onChange={(e) => onInputChange(e, 'description')} required rows={3} cols={20} />\r\n                </div>\r\n\r\n                <div className=\"field\">\r\n                    <label className=\"mb-3 font-bold\">Category</label>\r\n                    <div className=\"formgrid grid\">\r\n                        <div className=\"field-radiobutton col-6\">\r\n                            <RadioButton inputId=\"category1\" name=\"category\" value=\"Accessories\" onChange={onCategoryChange} checked={product.category === 'Accessories'} />\r\n                            <label htmlFor=\"category1\">Accessories</label>\r\n                        </div>\r\n                        <div className=\"field-radiobutton col-6\">\r\n                            <RadioButton inputId=\"category2\" name=\"category\" value=\"Clothing\" onChange={onCategoryChange} checked={product.category === 'Clothing'} />\r\n                            <label htmlFor=\"category2\">Clothing</label>\r\n                        </div>\r\n                        <div className=\"field-radiobutton col-6\">\r\n                            <RadioButton inputId=\"category3\" name=\"category\" value=\"Electronics\" onChange={onCategoryChange} checked={product.category === 'Electronics'} />\r\n                            <label htmlFor=\"category3\">Electronics</label>\r\n                        </div>\r\n                        <div className=\"field-radiobutton col-6\">\r\n                            <RadioButton inputId=\"category4\" name=\"category\" value=\"Fitness\" onChange={onCategoryChange} checked={product.category === 'Fitness'} />\r\n                            <label htmlFor=\"category4\">Fitness</label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"formgrid grid\">\r\n                    <div className=\"field col\">\r\n                        <label htmlFor=\"price\" className=\"font-bold\">\r\n                            Price\r\n                        </label>\r\n                        <InputNumber id=\"price\" value={product.price} onValueChange={(e) => onInputNumberChange(e, 'price')} mode=\"currency\" currency=\"USD\" locale=\"en-US\" />\r\n                    </div>\r\n                    <div className=\"field col\">\r\n                        <label htmlFor=\"quantity\" className=\"font-bold\">\r\n                            Quantity\r\n                        </label>\r\n                        <InputNumber id=\"quantity\" value={product.quantity} onValueChange={(e) => onInputNumberChange(e, 'quantity')} />\r\n                    </div>\r\n                </div>\r\n            </Dialog>\r\n\r\n            <Dialog visible={deleteProductDialog} style={{ width: '32rem' }} breakpoints={{ '960px': '75vw', '641px': '90vw' }} header=\"Confirm\" modal footer={deleteProductDialogFooter} onHide={hideDeleteProductDialog}>\r\n                <div className=\"confirmation-content\">\r\n                    <i className=\"pi pi-exclamation-triangle mr-3\" style={{ fontSize: '2rem' }} />\r\n                    {product && (\r\n                        <span>\r\n                            Are you sure you want to delete <b>{product.name}</b>?\r\n                        </span>\r\n                    )}\r\n                </div>\r\n            </Dialog>\r\n\r\n            <Dialog visible={deleteProductsDialog} style={{ width: '32rem' }} breakpoints={{ '960px': '75vw', '641px': '90vw' }} header=\"Confirm\" modal footer={deleteProductsDialogFooter} onHide={hideDeleteProductsDialog}>\r\n                <div className=\"confirmation-content\">\r\n                    <i className=\"pi pi-exclamation-triangle mr-3\" style={{ fontSize: '2rem' }} />\r\n                    {product && <span>Are you sure you want to delete the selected products?</span>}\r\n                </div>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n         */\n_s(Protected, \"JadZszbqna06PpJs9hMo7Hl/LOY=\");\n_c = Protected;\nvar _c;\n$RefreshReg$(_c, \"Protected\");","map":{"version":3,"names":["axios","useEffect","useState","jsxDEV","_jsxDEV","Protected","_s","users","setUsers","get","then","response","data","usuarios","catch","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","user","name","email","id","_c","$RefreshReg$"],"sources":["C:/Users/guill/OneDrive/Documents/UADE/TP/equipo1-ecommerce/equipo1-ecommerce/src/components/Login/Protected.js"],"sourcesContent":["import axios from 'axios';\r\nimport { useEffect, useState } from 'react';\r\n\r\nexport const Protected = () => {\r\n    \r\n    const [users, setUsers] = useState([])\r\n    useEffect(() => {\r\n        axios.get(\"http://localhost:3001/usuario\",) \r\n            \r\n\r\n            .then(response => {\r\n                setUsers(response.data.usuarios)\r\n            })\r\n            .catch(error => {\r\n                console.error(error) \r\n                \r\n            })\r\n    }\r\n    , [])\r\n    return (\r\n        <div>\r\n            <h2>Lista de Usuarios</h2>\r\n            <table className=\"table\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Nombre</th>\r\n                        <th>Email</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {users.map(user => {\r\n                        return(\r\n                        <tr key={user.id}>\r\n                            <td>{user.name}</td>\r\n                            <td>{user.email}</td>\r\n                        </tr>\r\n                    )})}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )   \r\n\r\n}\r\n\r\n\r\n/* import React, { useState, useEffect, useRef } from 'react';\r\nimport { classNames } from 'primereact/utils';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\nimport { Toast } from 'primereact/toast';\r\nimport { Button } from 'primereact/button';\r\nimport { FileUpload } from 'primereact/fileupload';\r\nimport { Rating } from 'primereact/rating';\r\nimport { Toolbar } from 'primereact/toolbar';\r\nimport { InputTextarea } from 'primereact/inputtextarea';\r\nimport { IconField } from 'primereact/iconfield';\r\nimport { InputIcon } from 'primereact/inputicon';\r\nimport { RadioButton } from 'primereact/radiobutton';\r\nimport { InputNumber } from 'primereact/inputnumber';\r\nimport { Dialog } from 'primereact/dialog';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { Tag } from 'primereact/tag';\r\nimport axios from 'axios';\r\nimport {collection, getDocs, addDoc, deleteDoc, doc, updateDoc, query} from 'firebase/firestore';\r\nimport { db } from '../config/firebase';\r\n\r\n\r\nexport default function Protected() {\r\n    let emptyProduct = {\r\n        id: null,\r\n        name: '',\r\n        image: null,\r\n        description: '',\r\n        category: null,\r\n        price: 0,\r\n        quantity: 0,\r\n        rating: 0,\r\n        inventoryStatus: 'INSTOCK'\r\n    };\r\n\r\n    const [products, setProducts] = useState(null);\r\n    const [productDialog, setProductDialog] = useState(false);\r\n    const [deleteProductDialog, setDeleteProductDialog] = useState(false);\r\n    const [deleteProductsDialog, setDeleteProductsDialog] = useState(false);\r\n    const [product, setProduct] = useState(emptyProduct);\r\n    const [selectedProducts, setSelectedProducts] = useState(null);\r\n    const [submitted, setSubmitted] = useState(false);\r\n    const [globalFilter, setGlobalFilter] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const toast = useRef(null);\r\n    const dt = useRef(null);\r\n\r\n    const fetchProductos = async () => {\r\n\r\n      setLoading(true)\r\n      const productsQuery = query(collection(db, 'productos'))\r\n      const productsSnapshot = await getDocs(productsQuery)\r\n\r\n      const prodList = productsSnapshot.docs.map(doc => {\r\n        return {\r\n          ...doc.data(),\r\n          id: doc.id\r\n        }\r\n      }) \r\n\r\n      setProducts(prodList)\r\n\r\n      setLoading(false)\r\n  }\r\n\r\n    useEffect(() => {\r\n      fetchProductos()\r\n    }, []);\r\n\r\n    const formatCurrency = (value) => {\r\n        return value.toLocaleString('en-US', { style: 'currency', currency: 'USD' });\r\n    };\r\n\r\n    const openNew = () => {\r\n        setProduct(emptyProduct);\r\n        setSubmitted(false);\r\n        setProductDialog(true);\r\n    };\r\n\r\n    const hideDialog = () => {\r\n        setSubmitted(false);\r\n        setProductDialog(false);\r\n    };\r\n\r\n    const hideDeleteProductDialog = () => {\r\n        setDeleteProductDialog(false);\r\n    };\r\n\r\n    const hideDeleteProductsDialog = () => {\r\n        setDeleteProductsDialog(false);\r\n    };\r\n\r\n    const saveProduct = async () => {\r\n        setSubmitted(true);\r\n        setLoading(true)\r\n        setProductDialog(false)\r\n        if (!product.id) {\r\n          await addDoc(collection(db, 'productos'), product)\r\n        } else {\r\n          await updateDoc(doc(db, 'productos', product.id), product)\r\n        }\r\n\r\n\r\n        toast.current.show({ severity: 'success', summary: 'Successful', detail: 'Product Created', life: 3000 });\r\n        setLoading(false)\r\n\r\n        fetchProductos()\r\n    };\r\n\r\n    const editProduct = (product) => {\r\n        setProduct({ ...product });\r\n        setProductDialog(true);\r\n    };\r\n\r\n    const confirmDeleteProduct = (product) => {\r\n        setProduct(product);\r\n        setDeleteProductDialog(true);\r\n    };\r\n\r\n    const deleteProduct = async () => {\r\n      setLoading(true)\r\n        let _products = products.filter((val) => val.id !== product.id);\r\n\r\n        setProducts(_products);\r\n        setDeleteProductDialog(false);\r\n        setProduct(emptyProduct);\r\n\r\n        await deleteDoc(doc(db, 'productos', product.id))\r\n\r\n\r\n        toast.current.show({ severity: 'success', summary: 'Successful', detail: 'Product Deleted', life: 3000 });\r\n        setLoading(false)\r\n        fetchProductos()\r\n\r\n    };\r\n\r\n    const findIndexById = (id) => {\r\n        let index = -1;\r\n\r\n        for (let i = 0; i < products.length; i++) {\r\n            if (products[i].id === id) {\r\n                index = i;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return index;\r\n    };\r\n\r\n    const createId = () => {\r\n        let id = '';\r\n        let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n\r\n        for (let i = 0; i < 5; i++) {\r\n            id += chars.charAt(Math.floor(Math.random() * chars.length));\r\n        }\r\n\r\n        return id;\r\n    };\r\n\r\n    const exportCSV = () => {\r\n        dt.current.exportCSV();\r\n    };\r\n\r\n    const confirmDeleteSelected = () => {\r\n        setDeleteProductsDialog(true);\r\n    };\r\n\r\n    const deleteSelectedProducts = () => {\r\n        let _products = products.filter((val) => !selectedProducts.includes(val));\r\n\r\n        setProducts(_products);\r\n        setDeleteProductsDialog(false);\r\n        setSelectedProducts(null);\r\n        toast.current.show({ severity: 'success', summary: 'Successful', detail: 'Products Deleted', life: 3000 });\r\n    };\r\n\r\n    const onCategoryChange = (e) => {\r\n        let _product = { ...product };\r\n\r\n        _product['category'] = e.value;\r\n        setProduct(_product);\r\n    };\r\n\r\n    const onInputChange = (e, name) => {\r\n        const val = (e.target && e.target.value) || '';\r\n        let _product = { ...product };\r\n\r\n        _product[`${name}`] = val;\r\n\r\n        setProduct(_product);\r\n    };\r\n\r\n    const onInputNumberChange = (e, name) => {\r\n        const val = e.value || 0;\r\n        let _product = { ...product };\r\n\r\n        _product[`${name}`] = val;\r\n\r\n        setProduct(_product);\r\n    };\r\n\r\n    const leftToolbarTemplate = () => {\r\n        return (\r\n            <div className=\"flex flex-wrap gap-2\">\r\n                <Button label=\"New\" icon=\"pi pi-plus\" severity=\"success\" onClick={openNew} />\r\n                <Button label=\"Delete\" icon=\"pi pi-trash\" severity=\"danger\" onClick={confirmDeleteSelected} disabled={!selectedProducts || !selectedProducts.length} />\r\n            </div>\r\n        );\r\n    };\r\n\r\n    const rightToolbarTemplate = () => {\r\n        return <Button label=\"Export\" icon=\"pi pi-upload\" className=\"p-button-help\" onClick={exportCSV} />;\r\n    };\r\n\r\n    const imageBodyTemplate = (rowData) => {\r\n        return <img src={`https://primefaces.org/cdn/primereact/images/product/${rowData.image}`} alt={rowData.image} className=\"shadow-2 border-round\" style={{ width: '64px' }} />;\r\n    };\r\n\r\n    const priceBodyTemplate = (rowData) => {\r\n        return formatCurrency(rowData.price);\r\n    };\r\n\r\n    const ratingBodyTemplate = (rowData) => {\r\n        return <Rating value={rowData.rating} readOnly cancel={false} />;\r\n    };\r\n\r\n    const statusBodyTemplate = (rowData) => {\r\n        return <Tag value={rowData.inventoryStatus} severity={getSeverity(rowData)}></Tag>;\r\n    };\r\n\r\n    const actionBodyTemplate = (rowData) => {\r\n        return (\r\n            <React.Fragment>\r\n                <Button icon=\"pi pi-pencil\" rounded outlined className=\"mr-2\" onClick={() => editProduct(rowData)} />\r\n                <Button icon=\"pi pi-trash\" rounded outlined severity=\"danger\" onClick={() => confirmDeleteProduct(rowData)} />\r\n            </React.Fragment>\r\n        );\r\n    };\r\n\r\n    const getSeverity = (product) => {\r\n        switch (product.inventoryStatus) {\r\n            case 'INSTOCK':\r\n                return 'success';\r\n\r\n            case 'LOWSTOCK':\r\n                return 'warning';\r\n\r\n            case 'OUTOFSTOCK':\r\n                return 'danger';\r\n\r\n            default:\r\n                return null;\r\n        }\r\n    };\r\n\r\n    const header = (\r\n        <div className=\"flex flex-wrap gap-2 align-items-center justify-content-between\">\r\n            <h4 className=\"m-0\">Manage Products</h4>\r\n            <IconField iconPosition=\"left\">\r\n                <InputIcon className=\"pi pi-search\" />\r\n                <InputText type=\"search\" onInput={(e) => setGlobalFilter(e.target.value)} placeholder=\"Search...\" />\r\n            </IconField>\r\n        </div>\r\n    );\r\n    const productDialogFooter = (\r\n        <React.Fragment>\r\n            <Button label=\"Cancel\" icon=\"pi pi-times\" outlined onClick={hideDialog} />\r\n            <Button label=\"Save\" icon=\"pi pi-check\" onClick={saveProduct} />\r\n        </React.Fragment>\r\n    );\r\n    const deleteProductDialogFooter = (\r\n        <React.Fragment>\r\n            <Button label=\"No\" icon=\"pi pi-times\" outlined onClick={hideDeleteProductDialog} />\r\n            <Button label=\"Yes\" icon=\"pi pi-check\" severity=\"danger\" onClick={deleteProduct} />\r\n        </React.Fragment>\r\n    );\r\n    const deleteProductsDialogFooter = (\r\n        <React.Fragment>\r\n            <Button label=\"No\" icon=\"pi pi-times\" outlined onClick={hideDeleteProductsDialog} />\r\n            <Button label=\"Yes\" icon=\"pi pi-check\" severity=\"danger\" onClick={deleteSelectedProducts} />\r\n        </React.Fragment>\r\n    );\r\n\r\n    return (\r\n        <div>\r\n            <Toast ref={toast} />\r\n            <div className=\"card\">\r\n                <Toolbar className=\"mb-4\" left={leftToolbarTemplate} right={rightToolbarTemplate}></Toolbar>\r\n\r\n                <DataTable ref={dt} value={products} selection={selectedProducts} onSelectionChange={(e) => setSelectedProducts(e.value)}\r\n                        dataKey=\"id\"  paginator rows={10} rowsPerPageOptions={[5, 10, 25]} loading={loading}\r\n                        paginatorTemplate=\"FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown\"\r\n                        currentPageReportTemplate=\"Showing {first} to {last} of {totalRecords} products\" globalFilter={globalFilter} header={header}>\r\n                    <Column selectionMode=\"multiple\" exportable={false}></Column>\r\n                    <Column field=\"code\" header=\"Code\" sortable style={{ minWidth: '12rem' }}></Column>\r\n                    <Column field=\"name\" header=\"Name\" sortable style={{ minWidth: '16rem' }}></Column>\r\n                    <Column field=\"image\" header=\"Image\" body={imageBodyTemplate}></Column>\r\n                    <Column field=\"price\" header=\"Price\" body={priceBodyTemplate} sortable style={{ minWidth: '8rem' }}></Column>\r\n                    <Column field=\"category\" header=\"Category\" sortable style={{ minWidth: '10rem' }}></Column>\r\n                    <Column field=\"rating\" header=\"Reviews\" body={ratingBodyTemplate} sortable style={{ minWidth: '12rem' }}></Column>\r\n                    <Column field=\"inventoryStatus\" header=\"Status\" body={statusBodyTemplate} sortable style={{ minWidth: '12rem' }}></Column>\r\n                    <Column body={actionBodyTemplate} exportable={false} style={{ minWidth: '12rem' }}></Column>\r\n                </DataTable>\r\n            </div>\r\n\r\n            <Dialog visible={productDialog} style={{ width: '32rem' }} breakpoints={{ '960px': '75vw', '641px': '90vw' }} header=\"Product Details\" modal className=\"p-fluid\" footer={productDialogFooter} onHide={hideDialog}>\r\n                {product.image && <img src={`https://primefaces.org/cdn/primereact/images/product/${product.image}`} alt={product.image} className=\"product-image block m-auto pb-3\" />}\r\n                <div className=\"field\">\r\n                    <label htmlFor=\"name\" className=\"font-bold\">\r\n                        Name\r\n                    </label>\r\n                    <InputText id=\"name\" value={product.name} onChange={(e) => onInputChange(e, 'name')} required autoFocus className={classNames({ 'p-invalid': submitted && !product.name })} />\r\n                    {submitted && !product.name && <small className=\"p-error\">Name is required.</small>}\r\n                </div>\r\n                <div className=\"field\">\r\n                    <label htmlFor=\"description\" className=\"font-bold\">\r\n                        Description\r\n                    </label>\r\n                    <InputTextarea id=\"description\" value={product.description} onChange={(e) => onInputChange(e, 'description')} required rows={3} cols={20} />\r\n                </div>\r\n\r\n                <div className=\"field\">\r\n                    <label className=\"mb-3 font-bold\">Category</label>\r\n                    <div className=\"formgrid grid\">\r\n                        <div className=\"field-radiobutton col-6\">\r\n                            <RadioButton inputId=\"category1\" name=\"category\" value=\"Accessories\" onChange={onCategoryChange} checked={product.category === 'Accessories'} />\r\n                            <label htmlFor=\"category1\">Accessories</label>\r\n                        </div>\r\n                        <div className=\"field-radiobutton col-6\">\r\n                            <RadioButton inputId=\"category2\" name=\"category\" value=\"Clothing\" onChange={onCategoryChange} checked={product.category === 'Clothing'} />\r\n                            <label htmlFor=\"category2\">Clothing</label>\r\n                        </div>\r\n                        <div className=\"field-radiobutton col-6\">\r\n                            <RadioButton inputId=\"category3\" name=\"category\" value=\"Electronics\" onChange={onCategoryChange} checked={product.category === 'Electronics'} />\r\n                            <label htmlFor=\"category3\">Electronics</label>\r\n                        </div>\r\n                        <div className=\"field-radiobutton col-6\">\r\n                            <RadioButton inputId=\"category4\" name=\"category\" value=\"Fitness\" onChange={onCategoryChange} checked={product.category === 'Fitness'} />\r\n                            <label htmlFor=\"category4\">Fitness</label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"formgrid grid\">\r\n                    <div className=\"field col\">\r\n                        <label htmlFor=\"price\" className=\"font-bold\">\r\n                            Price\r\n                        </label>\r\n                        <InputNumber id=\"price\" value={product.price} onValueChange={(e) => onInputNumberChange(e, 'price')} mode=\"currency\" currency=\"USD\" locale=\"en-US\" />\r\n                    </div>\r\n                    <div className=\"field col\">\r\n                        <label htmlFor=\"quantity\" className=\"font-bold\">\r\n                            Quantity\r\n                        </label>\r\n                        <InputNumber id=\"quantity\" value={product.quantity} onValueChange={(e) => onInputNumberChange(e, 'quantity')} />\r\n                    </div>\r\n                </div>\r\n            </Dialog>\r\n\r\n            <Dialog visible={deleteProductDialog} style={{ width: '32rem' }} breakpoints={{ '960px': '75vw', '641px': '90vw' }} header=\"Confirm\" modal footer={deleteProductDialogFooter} onHide={hideDeleteProductDialog}>\r\n                <div className=\"confirmation-content\">\r\n                    <i className=\"pi pi-exclamation-triangle mr-3\" style={{ fontSize: '2rem' }} />\r\n                    {product && (\r\n                        <span>\r\n                            Are you sure you want to delete <b>{product.name}</b>?\r\n                        </span>\r\n                    )}\r\n                </div>\r\n            </Dialog>\r\n\r\n            <Dialog visible={deleteProductsDialog} style={{ width: '32rem' }} breakpoints={{ '960px': '75vw', '641px': '90vw' }} header=\"Confirm\" modal footer={deleteProductsDialogFooter} onHide={hideDeleteProductsDialog}>\r\n                <div className=\"confirmation-content\">\r\n                    <i className=\"pi pi-exclamation-triangle mr-3\" style={{ fontSize: '2rem' }} />\r\n                    {product && <span>Are you sure you want to delete the selected products?</span>}\r\n                </div>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n         */"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,OAAO,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAE3B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACtCD,SAAS,CAAC,MAAM;IACZD,KAAK,CAACS,GAAG,CAAC,+BAAgC,CAAC,CAGtCC,IAAI,CAACC,QAAQ,IAAI;MACdH,QAAQ,CAACG,QAAQ,CAACC,IAAI,CAACC,QAAQ,CAAC;IACpC,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;MACZC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IAExB,CAAC,CAAC;EACV,CAAC,EACC,EAAE,CAAC;EACL,oBACIX,OAAA;IAAAa,QAAA,gBACIb,OAAA;MAAAa,QAAA,EAAI;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC1BjB,OAAA;MAAOkB,SAAS,EAAC,OAAO;MAAAL,QAAA,gBACpBb,OAAA;QAAAa,QAAA,eACIb,OAAA;UAAAa,QAAA,gBACIb,OAAA;YAAAa,QAAA,EAAI;UAAM;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACfjB,OAAA;YAAAa,QAAA,EAAI;UAAK;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACd;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC,eACRjB,OAAA;QAAAa,QAAA,EACKV,KAAK,CAACgB,GAAG,CAACC,IAAI,IAAI;UACf,oBACApB,OAAA;YAAAa,QAAA,gBACIb,OAAA;cAAAa,QAAA,EAAKO,IAAI,CAACC;YAAI;cAAAP,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eACpBjB,OAAA;cAAAa,QAAA,EAAKO,IAAI,CAACE;YAAK;cAAAR,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC;UAAA,GAFhBG,IAAI,CAACG,EAAE;YAAAT,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAGZ,CAAC;QACR,CAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACP,CAAC;AAGdf,EAAA,CA1CaD,SAAS;AAAAuB,EAAA,GAATvB,SAAS;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}