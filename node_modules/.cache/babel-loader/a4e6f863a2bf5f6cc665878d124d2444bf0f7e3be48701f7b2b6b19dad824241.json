{"ast":null,"code":"const {\n  Datastore\n} = require('@google-cloud/datastore');\nconst admin = require('firebase-admin');\nconst {\n  generarJWT\n} = require('../../src/components/helpers/generadorJWT');\nconst serviceAccount = require('../../back/credentials/firebase-key.json');\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(serviceAccount)\n  });\n}\n\n// Inicializa Datastore\nconst datastore = new Datastore({\n  projectId: 'equipo1-ecommerce',\n  keyFilename: '../../back/credentials/firebase-key.json'\n});\n\n// Controlador de inicio de sesión\nconst login = async (req, res) => {\n  const {\n    firebaseToken\n  } = req.body;\n  try {\n    // Verifica el token de Firebase usando Firebase Admin\n    const decodedToken = await admin.auth().verifyIdToken(firebaseToken);\n    const {\n      uid,\n      email\n    } = decodedToken;\n\n    // Consulta en Datastore para verificar si el usuario existe\n    const query = datastore.createQuery('Usuario').filter('email', '=', email);\n    const [users] = await datastore.runQuery(query);\n    if (users.length > 0) {\n      const user = users[0];\n      const userRole = user.role || 'user';\n\n      // Genera un JWT personalizado si es necesario (opcional)\n      const token = await generarJWT(uid, email, userRole);\n\n      // Devuelve una respuesta exitosa con el token y rol del usuario\n      res.json({\n        ok: true,\n        token,\n        userRole\n      });\n    } else {\n      // Usuario no encontrado en Datastore\n      res.status(404).json({\n        ok: false,\n        message: 'User not found'\n      });\n    }\n  } catch (error) {\n    console.error('Error in login:', error);\n    res.status(401).json({\n      ok: false,\n      message: 'Unauthorized'\n    });\n  }\n};\nmodule.exports = {\n  login\n};","map":{"version":3,"names":["Datastore","require","admin","generarJWT","serviceAccount","apps","length","initializeApp","credential","cert","datastore","projectId","keyFilename","login","req","res","firebaseToken","body","decodedToken","auth","verifyIdToken","uid","email","query","createQuery","filter","users","runQuery","user","userRole","role","token","json","ok","status","message","error","console","module","exports"],"sources":["C:/Users/guill/OneDrive/Documents/UADE/TP/equipo1-ecommerce/equipo1-ecommerce/src/context/AuthContext.js"],"sourcesContent":["const { Datastore } = require('@google-cloud/datastore');\r\nconst admin = require('firebase-admin');\r\nconst { generarJWT } = require('../../src/components/helpers/generadorJWT');\r\nconst serviceAccount = require('../../back/credentials/firebase-key.json');\r\nif (!admin.apps.length) {\r\n  admin.initializeApp({\r\n    credential: admin.credential.cert(serviceAccount),\r\n  });\r\n}\r\n\r\n// Inicializa Datastore\r\nconst datastore = new Datastore({\r\n  projectId: 'equipo1-ecommerce',\r\n  keyFilename: '../../back/credentials/firebase-key.json',\r\n});\r\n\r\n// Controlador de inicio de sesión\r\nconst login = async (req, res) => {\r\n  const { firebaseToken } = req.body;\r\n\r\n  try {\r\n    // Verifica el token de Firebase usando Firebase Admin\r\n    const decodedToken = await admin.auth().verifyIdToken(firebaseToken);\r\n    const { uid, email } = decodedToken;\r\n\r\n    // Consulta en Datastore para verificar si el usuario existe\r\n    const query = datastore.createQuery('Usuario').filter('email', '=', email);\r\n    const [users] = await datastore.runQuery(query);\r\n\r\n    if (users.length > 0) {\r\n      const user = users[0];\r\n      const userRole = user.role || 'user';\r\n\r\n      // Genera un JWT personalizado si es necesario (opcional)\r\n      const token = await generarJWT(uid, email, userRole);\r\n\r\n      // Devuelve una respuesta exitosa con el token y rol del usuario\r\n      res.json({ ok: true, token, userRole });\r\n    } else {\r\n      // Usuario no encontrado en Datastore\r\n      res.status(404).json({ ok: false, message: 'User not found' });\r\n    }\r\n  } catch (error) {\r\n    console.error('Error in login:', error);\r\n    res.status(401).json({ ok: false, message: 'Unauthorized' });\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  login,\r\n};\r\n"],"mappings":"AAAA,MAAM;EAAEA;AAAU,CAAC,GAAGC,OAAO,CAAC,yBAAyB,CAAC;AACxD,MAAMC,KAAK,GAAGD,OAAO,CAAC,gBAAgB,CAAC;AACvC,MAAM;EAAEE;AAAW,CAAC,GAAGF,OAAO,CAAC,2CAA2C,CAAC;AAC3E,MAAMG,cAAc,GAAGH,OAAO,CAAC,0CAA0C,CAAC;AAC1E,IAAI,CAACC,KAAK,CAACG,IAAI,CAACC,MAAM,EAAE;EACtBJ,KAAK,CAACK,aAAa,CAAC;IAClBC,UAAU,EAAEN,KAAK,CAACM,UAAU,CAACC,IAAI,CAACL,cAAc;EAClD,CAAC,CAAC;AACJ;;AAEA;AACA,MAAMM,SAAS,GAAG,IAAIV,SAAS,CAAC;EAC9BW,SAAS,EAAE,mBAAmB;EAC9BC,WAAW,EAAE;AACf,CAAC,CAAC;;AAEF;AACA,MAAMC,KAAK,GAAG,MAAAA,CAAOC,GAAG,EAAEC,GAAG,KAAK;EAChC,MAAM;IAAEC;EAAc,CAAC,GAAGF,GAAG,CAACG,IAAI;EAElC,IAAI;IACF;IACA,MAAMC,YAAY,GAAG,MAAMhB,KAAK,CAACiB,IAAI,CAAC,CAAC,CAACC,aAAa,CAACJ,aAAa,CAAC;IACpE,MAAM;MAAEK,GAAG;MAAEC;IAAM,CAAC,GAAGJ,YAAY;;IAEnC;IACA,MAAMK,KAAK,GAAGb,SAAS,CAACc,WAAW,CAAC,SAAS,CAAC,CAACC,MAAM,CAAC,OAAO,EAAE,GAAG,EAAEH,KAAK,CAAC;IAC1E,MAAM,CAACI,KAAK,CAAC,GAAG,MAAMhB,SAAS,CAACiB,QAAQ,CAACJ,KAAK,CAAC;IAE/C,IAAIG,KAAK,CAACpB,MAAM,GAAG,CAAC,EAAE;MACpB,MAAMsB,IAAI,GAAGF,KAAK,CAAC,CAAC,CAAC;MACrB,MAAMG,QAAQ,GAAGD,IAAI,CAACE,IAAI,IAAI,MAAM;;MAEpC;MACA,MAAMC,KAAK,GAAG,MAAM5B,UAAU,CAACkB,GAAG,EAAEC,KAAK,EAAEO,QAAQ,CAAC;;MAEpD;MACAd,GAAG,CAACiB,IAAI,CAAC;QAAEC,EAAE,EAAE,IAAI;QAAEF,KAAK;QAAEF;MAAS,CAAC,CAAC;IACzC,CAAC,MAAM;MACL;MACAd,GAAG,CAACmB,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;QAAEC,EAAE,EAAE,KAAK;QAAEE,OAAO,EAAE;MAAiB,CAAC,CAAC;IAChE;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;IACvCrB,GAAG,CAACmB,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;MAAEC,EAAE,EAAE,KAAK;MAAEE,OAAO,EAAE;IAAe,CAAC,CAAC;EAC9D;AACF,CAAC;AAEDG,MAAM,CAACC,OAAO,GAAG;EACf1B;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}