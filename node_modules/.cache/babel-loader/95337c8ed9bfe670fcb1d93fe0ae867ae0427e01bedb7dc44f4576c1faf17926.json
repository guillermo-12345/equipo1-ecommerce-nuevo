{"ast":null,"code":"\"use strict\";\n\n/* eslint-disable no-inner-declarations */\n// Copyright 2014 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.entity = void 0;\nconst arrify = require(\"arrify\");\nconst extend = require(\"extend\");\nconst is = require(\"is\");\nconst google_gax_1 = require(\"google-gax\");\nconst path = require(\"path\");\nconst filter_1 = require(\"./filter\");\n// eslint-disable-next-line @typescript-eslint/no-namespace\nvar entity;\n(function (entity_1) {\n  class InvalidKeyError extends Error {\n    constructor(opts) {\n      const errorMessages = {\n        MISSING_KIND: 'A key should contain at least a kind.',\n        MISSING_ANCESTOR_ID: 'Ancestor keys require an id or name.'\n      };\n      super(errorMessages[opts.code]);\n      this.name = 'InvalidKey';\n    }\n  }\n  entity_1.InvalidKeyError = InvalidKeyError;\n  /**\n   * A symbol to access the Key object from an entity object.\n   *\n   * @type {symbol}\n   * @private\n   */\n  entity_1.KEY_SYMBOL = Symbol('KEY');\n  /**\n   * Build a Datastore Double object. For long doubles, a string can be\n   * provided.\n   *\n   * @class\n   * @param {number} value The double value.\n   *\n   * @example\n   * ```\n   * const {Datastore} = require('@google-cloud/datastore');\n   * const datastore = new Datastore();\n   * const aDouble = datastore.double(7.3);\n   * ```\n   */\n  class Double {\n    constructor(value) {\n      /**\n       * @name Double#type\n       * @type {string}\n       */\n      this.type = 'DatastoreDouble';\n      /**\n       * @name Double#value\n       * @type {number}\n       */\n      this.value = value;\n    }\n  }\n  entity_1.Double = Double;\n  /**\n   * Check if something is a Datastore Double object.\n   *\n   * @private\n   * @param {*} value The value to check if it is a datastore double.\n   * @returns {boolean}\n   */\n  function isDsDouble(value) {\n    return value instanceof entity.Double;\n  }\n  entity_1.isDsDouble = isDsDouble;\n  /**\n   * Check if a value is a Datastore Double object converted from JSON.\n   *\n   * @private\n   * @param {*} value The value to check if it is datastore double like.\n   * @returns {boolean}\n   */\n  function isDsDoubleLike(value) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const maybeDsDouble = value;\n    return isDsDouble(maybeDsDouble) || is.object(maybeDsDouble) && is.number(maybeDsDouble.value) && maybeDsDouble.type === 'DatastoreDouble';\n  }\n  entity_1.isDsDoubleLike = isDsDoubleLike;\n  /**\n   * Build a Datastore Int object. For long integers, a string can be provided.\n   *\n   * @class\n   * @param {number|string} value The integer value.\n   * @param {object} [typeCastOptions] Configuration to convert\n   *     values of `integerValue` type to a custom value. Must provide an\n   *     `integerTypeCastFunction` to handle `integerValue` conversion.\n   * @param {function} typeCastOptions.integerTypeCastFunction A custom user\n   *     provided function to convert `integerValue`.\n   * @param {string|string[]} [typeCastOptions.properties] `Entity` property\n   *     names to be converted using `integerTypeCastFunction`.\n   *\n   * @example\n   * ```\n   * const {Datastore} = require('@google-cloud/datastore');\n   * const datastore = new Datastore();\n   * const anInt = datastore.int(7);\n   * ```\n   */\n  class Int extends Number {\n    constructor(value, typeCastOptions) {\n      super(typeof value === 'object' ? value.integerValue : value);\n      this._entityPropertyName = typeof value === 'object' ? value.propertyName : undefined;\n      this.value = typeof value === 'object' ? value.integerValue.toString() : value.toString();\n      /**\n       * @name Int#type\n       * @type {string}\n       */\n      this.type = 'DatastoreInt';\n      /**\n       * @name Int#value\n       * @type {string}\n       */\n      if (typeCastOptions) {\n        this.typeCastFunction = typeCastOptions.integerTypeCastFunction;\n        if (typeof typeCastOptions.integerTypeCastFunction !== 'function') {\n          throw new Error('integerTypeCastFunction is not a function or was not provided.');\n        }\n        this.typeCastProperties = typeCastOptions.properties ? arrify(typeCastOptions.properties) : undefined;\n      }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    valueOf() {\n      let shouldCustomCast = this.typeCastFunction ? true : false;\n      if (this.typeCastProperties && !this.typeCastProperties.includes(this._entityPropertyName)) {\n        shouldCustomCast = false;\n      }\n      if (shouldCustomCast) {\n        try {\n          return this.typeCastFunction(this.value);\n        } catch (error) {\n          error.message = `integerTypeCastFunction threw an error:\\n\\n  - ${error.message}`;\n          throw error;\n        }\n      } else {\n        return decodeIntegerValue({\n          integerValue: this.value,\n          propertyName: this._entityPropertyName\n        });\n      }\n    }\n    toJSON() {\n      return {\n        type: this.type,\n        value: this.value\n      };\n    }\n  }\n  entity_1.Int = Int;\n  /**\n   * Check if something is a Datastore Int object.\n   *\n   * @private\n   * @param {*} value The value to check if it is a Datastore Int\n   * @returns {boolean}\n   */\n  function isDsInt(value) {\n    return value instanceof entity.Int;\n  }\n  entity_1.isDsInt = isDsInt;\n  /**\n   * Check if a value is a Datastore Int object converted from JSON.\n   *\n   * @private\n   * @param {*} value The value to check if it is Datastore IntLike\n   * @returns {boolean}\n   */\n  function isDsIntLike(value) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const maybeDsInt = value;\n    return isDsInt(maybeDsInt) || is.object(maybeDsInt) && is.string(maybeDsInt.value) && maybeDsInt.type === 'DatastoreInt';\n  }\n  entity_1.isDsIntLike = isDsIntLike;\n  /**\n   * Build a Datastore Geo Point object.\n   *\n   * @class\n   * @param {object} coordinates Coordinate value.\n   * @param {number} coordinates.latitude Latitudinal value.\n   * @param {number} coordinates.longitude Longitudinal value.\n   *\n   * @example\n   * ```\n   * const {Datastore} = require('@google-cloud/datastore');\n   * const datastore = new Datastore();\n   * const coordinates = {\n   *   latitude: 40.6894,\n   *   longitude: -74.0447\n   * };\n   *\n   * const geoPoint = datastore.geoPoint(coordinates);\n   * ```\n   */\n  class GeoPoint {\n    constructor(coordinates) {\n      /**\n       * Coordinate value.\n       *\n       * @name GeoPoint#coordinates\n       * @type {object}\n       * @property {number} latitude Latitudinal value.\n       * @property {number} longitude Longitudinal value.\n       */\n      this.value = coordinates;\n    }\n  }\n  entity_1.GeoPoint = GeoPoint;\n  /**\n   * Check if something is a Datastore Geo Point object.\n   *\n   * @private\n   * @param {*} value The value to check if it is a Geo point.\n   * @returns {boolean}\n   */\n  function isDsGeoPoint(value) {\n    return value instanceof entity.GeoPoint;\n  }\n  entity_1.isDsGeoPoint = isDsGeoPoint;\n  /**\n   * Build a Datastore Key object.\n   *\n   * @class\n   * @param {object} options Configuration object.\n   * @param {array} options.path Key path.\n   * @param {string} [options.namespace] Optional namespace.\n   *\n   * @example\n   * ```\n   * //-\n   * // Create an incomplete key with a kind value of `Company`.\n   * //-\n   * const {Datastore} = require('@google-cloud/datastore');\n   * const datastore = new Datastore();\n   * const key = datastore.key('Company');\n   *\n   * ```\n   * @example\n   * ```\n   * //-\n   * // Create a complete key with a kind value of `Company` and id`123`.\n   * //-\n   * const {Datastore} = require('@google-cloud/datastore');\n   * const datastore = new Datastore();\n   * const key = datastore.key(['Company', 123]);\n   *\n   * ```\n   * @example\n   * ```\n   * //-\n   * // If the ID integer is outside the bounds of a JavaScript Number\n   * // object, create an Int.\n   * //-\n   * const {Datastore} = require('@google-cloud/datastore');\n   * const datastore = new Datastore();\n   * const key = datastore.key([\n   *   'Company',\n   *   datastore.int('100000000000001234')\n   * ]);\n   *\n   * ```\n   * @example\n   * ```\n   * const {Datastore} = require('@google-cloud/datastore');\n   * const datastore = new Datastore();\n   * // Create a complete key with a kind value of `Company` and name `Google`.\n   * // Note: `id` is used for numeric identifiers and `name` is used otherwise.\n   * const key = datastore.key(['Company', 'Google']);\n   *\n   * ```\n   * @example\n   * ```\n   * //-\n   * // Create a complete key from a provided namespace and path.\n   * //-\n   * const {Datastore} = require('@google-cloud/datastore');\n   * const datastore = new Datastore();\n   * const key = datastore.key({\n   *   namespace: 'My-NS',\n   *   path: ['Company', 123]\n   * });\n   *\n   * ```\n   * @example Serialize the key for later re-use.\n   * ```\n   * const {Datastore} = require('@google-cloud/datastore');\n   * const datastore = new Datastore();\n   * const key = datastore.key({\n   *   namespace: 'My-NS',\n   *   path: ['Company', 123]\n   * });\n   * // Later...\n   * const key = datastore.key(key.serialized);\n   * ```\n   */\n  class Key {\n    constructor(options) {\n      /**\n       * @name Key#namespace\n       * @type {string}\n       */\n      this.namespace = options.namespace;\n      options.path = [].slice.call(options.path);\n      if (options.path.length % 2 === 0) {\n        const identifier = options.path.pop();\n        if (is.number(identifier) || isDsInt(identifier) || isDsIntLike(identifier)) {\n          this.id = identifier.value || identifier;\n        } else if (is.string(identifier)) {\n          this.name = identifier;\n        }\n      }\n      this.kind = options.path.pop();\n      if (options.path.length > 0) {\n        this.parent = new Key(options);\n      }\n      // `path` is computed on demand to consider any changes that may have been\n      // made to the key.\n      /**\n       * @name Key#path\n       * @type {array}\n       */\n      Object.defineProperty(this, 'path', {\n        enumerable: true,\n        get() {\n          return arrify(this.parent && this.parent.path).concat([this.kind, this.name || this.id]);\n        }\n      });\n    }\n    /**\n     * Access the `serialized` property for a library-compatible way to re-use a\n     * key.\n     *\n     * @returns {object}\n     *\n     * @example\n     * ```\n     * const key = datastore.key({\n     *   namespace: 'My-NS',\n     *   path: ['Company', 123]\n     * });\n     *\n     * // Later...\n     * const key = datastore.key(key.serialized);\n     * ```\n     */\n    get serialized() {\n      const serializedKey = {\n        namespace: this.namespace,\n        path: [this.kind, this.name || new Int(this.id)]\n      };\n      if (this.parent) {\n        serializedKey.path = this.parent.serialized.path.concat(serializedKey.path);\n      }\n      return serializedKey;\n    }\n  }\n  entity_1.Key = Key;\n  /**\n   * Check if something is a Datastore Key object.\n   *\n   * @private\n   * @param {*} value\n   * @returns {boolean}\n   */\n  function isDsKey(value) {\n    return value instanceof entity.Key;\n  }\n  entity_1.isDsKey = isDsKey;\n  /**\n   * Convert a protobuf `integerValue`.\n   *\n   * @private\n   * @param {object} value The `integerValue` to convert.\n   */\n  function decodeIntegerValue(value) {\n    const num = Number(value.integerValue);\n    if (!Number.isSafeInteger(num)) {\n      throw new Error('We attempted to return all of the numeric values, but ' + (value.propertyName ? value.propertyName + ' ' : '') + 'value ' + value.integerValue + \" is out of bounds of 'Number.MAX_SAFE_INTEGER'.\\n\" + \"To prevent this error, please consider passing 'options.wrapNumbers=true' or\\n\" + \"'options.wrapNumbers' as\\n\" + '{\\n' + '  integerTypeCastFunction: provide <your_custom_function>\\n' + '  properties: optionally specify property name(s) to be custom casted\\n' + '}\\n');\n    }\n    return num;\n  }\n  /**\n   * @typedef {object} IntegerTypeCastOptions Configuration to convert\n   *     values of `integerValue` type to a custom value. Must provide an\n   *     `integerTypeCastFunction` to handle `integerValue` conversion.\n   * @property {function} integerTypeCastFunction A custom user\n   *     provided function to convert `integerValue`.\n   * @property {string | string[]} [properties] `Entity` property\n   *     names to be converted using `integerTypeCastFunction`.\n   */\n  /**\n   * Convert a protobuf Value message to its native value.\n   *\n   * @private\n   * @param {object} valueProto The protobuf Value message to convert.\n   * @param {boolean | IntegerTypeCastOptions} [wrapNumbers=false] Wrap values of integerValue type in\n   *     {@link Datastore#Int} objects.\n   *     If a `boolean`, this will wrap values in {@link Datastore#Int} objects.\n   *     If an `object`, this will return a value returned by\n   *     `wrapNumbers.integerTypeCastFunction`.\n   *     Please see {@link IntegerTypeCastOptions} for options descriptions.\n   * @returns {*}\n   *\n   * @example\n   * ```\n   * decodeValueProto({\n   *   booleanValue: false\n   * });\n   * // false\n   *\n   * decodeValueProto({\n   *   stringValue: 'Hi'\n   * });\n   * // 'Hi'\n   *\n   * decodeValueProto({\n   *   blobValue: Buffer.from('68656c6c6f')\n   * });\n   * // <Buffer 68 65 6c 6c 6f>\n   * ```\n   */\n  function decodeValueProto(valueProto, wrapNumbers) {\n    const valueType = valueProto.valueType;\n    const value = valueProto[valueType];\n    switch (valueType) {\n      case 'arrayValue':\n        {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          return value.values.map(val => entity.decodeValueProto(val, wrapNumbers));\n        }\n      case 'blobValue':\n        {\n          return Buffer.from(value, 'base64');\n        }\n      case 'nullValue':\n        {\n          return null;\n        }\n      case 'doubleValue':\n        {\n          return Number(value);\n        }\n      case 'integerValue':\n        {\n          return wrapNumbers ? typeof wrapNumbers === 'object' ? new entity.Int(valueProto, wrapNumbers).valueOf() : new entity.Int(valueProto, undefined) : decodeIntegerValue(valueProto);\n        }\n      case 'entityValue':\n        {\n          return entity.entityFromEntityProto(value, wrapNumbers);\n        }\n      case 'keyValue':\n        {\n          return entity.keyFromKeyProto(value);\n        }\n      case 'timestampValue':\n        {\n          const milliseconds = Number(value.nanos) / 1e6;\n          return new Date(Number(value.seconds) * 1000 + milliseconds);\n        }\n      default:\n        {\n          return value;\n        }\n    }\n  }\n  entity_1.decodeValueProto = decodeValueProto;\n  /**\n   * Convert any native value to a protobuf Value message object.\n   *\n   * @private\n   * @param {*} value Native value.\n   * @param {string} property The property to use for the average calculation.\n   * @returns {object}\n   *\n   * @example\n   * ```\n   * encodeValue('Hi');\n   * // {\n   * //   stringValue: 'Hi'\n   * // }\n   * ```\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function encodeValue(value, property) {\n    const valueProto = {};\n    if (is.boolean(value)) {\n      valueProto.booleanValue = value;\n      return valueProto;\n    }\n    if (is.null(value)) {\n      valueProto.nullValue = 0;\n      return valueProto;\n    }\n    if (typeof value === 'number') {\n      if (Number.isInteger(value)) {\n        if (!Number.isSafeInteger(value)) {\n          process.emitWarning('IntegerOutOfBoundsWarning: ' + \"the value for '\" + property + \"' property is outside of bounds of a JavaScript Number.\\n\" + \"Use 'Datastore.int(<integer_value_as_string>)' to preserve accuracy during the upload.\");\n        }\n        value = new entity.Int(value);\n      } else {\n        value = new entity.Double(value);\n      }\n    }\n    if (isDsInt(value)) {\n      valueProto.integerValue = value.value;\n      return valueProto;\n    }\n    if (isDsDouble(value)) {\n      valueProto.doubleValue = value.value;\n      return valueProto;\n    }\n    if (isDsGeoPoint(value)) {\n      valueProto.geoPointValue = value.value;\n      return valueProto;\n    }\n    if (value instanceof Date) {\n      const seconds = value.getTime() / 1000;\n      valueProto.timestampValue = {\n        seconds: Math.floor(seconds),\n        nanos: value.getMilliseconds() * 1e6\n      };\n      return valueProto;\n    }\n    if (is.string(value)) {\n      valueProto.stringValue = value;\n      return valueProto;\n    }\n    if (value instanceof Buffer) {\n      valueProto.blobValue = value;\n      return valueProto;\n    }\n    if (Array.isArray(value)) {\n      valueProto.arrayValue = {\n        values: value.map(val => entity.encodeValue(val, property))\n      };\n      return valueProto;\n    }\n    if (isDsKey(value)) {\n      valueProto.keyValue = entity.keyToKeyProto(value);\n      return valueProto;\n    }\n    if (is.object(value)) {\n      if (!is.empty(value)) {\n        value = extend(true, {}, value);\n        for (const prop in value) {\n          value[prop] = entity.encodeValue(value[prop], prop);\n        }\n      }\n      valueProto.entityValue = {\n        properties: value\n      };\n      return valueProto;\n    }\n    throw new Error('Unsupported field value, ' + value + ', was provided.');\n  }\n  entity_1.encodeValue = encodeValue;\n  /**\n   * Convert any entity protocol to a plain object.\n   *\n   * @todo Use registered metadata if provided.\n   *\n   * @private\n   * @param {object} entityProto The protocol entity object to convert.\n   * @param {boolean | IntegerTypeCastOptions} [wrapNumbers=false] Wrap values of integerValue type in\n   *     {@link Datastore#Int} objects.\n   *     If a `boolean`, this will wrap values in {@link Datastore#Int} objects.\n   *     If an `object`, this will return a value returned by\n   *     `wrapNumbers.integerTypeCastFunction`.\n   *     Please see {@link IntegerTypeCastOptions} for options descriptions.\n   * @returns {object}\n   *\n   * @example\n   * ```\n   * entityFromEntityProto({\n   *   properties: {\n   *     map: {\n   *       name: {\n   *         value: {\n   *           valueType: 'stringValue',\n   *           stringValue: 'Stephen'\n   *         }\n   *       }\n   *     }\n   *   }\n   * });\n   * // {\n   * //   name: 'Stephen'\n   * // }\n   * ```\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function entityFromEntityProto(entityProto, wrapNumbers) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const entityObject = {};\n    const properties = entityProto.properties || {};\n    for (const property in properties) {\n      const value = properties[property];\n      value.propertyName = property;\n      entityObject[property] = entity.decodeValueProto(value, wrapNumbers);\n    }\n    return entityObject;\n  }\n  entity_1.entityFromEntityProto = entityFromEntityProto;\n  /**\n   * Convert an entity object to an entity protocol object.\n   *\n   * @private\n   * @param {object} entityObject The entity object to convert.\n   * @returns {object}\n   *\n   * @example\n   * ```\n   * entityToEntityProto({\n   *   excludeFromIndexes: [\n   *     'name'\n   *   ],\n   *   data: {\n   *     name: 'Burcu',\n   *     legit: true\n   *   }\n   * });\n   * // {\n   * //   key: null,\n   * //   properties: {\n   * //     name: {\n   * //       stringValue: 'Burcu'\n   * //       excludeFromIndexes: true\n   * //     },\n   * //     legit: {\n   * //       booleanValue: true\n   * //     }\n   * //   }\n   * // }\n   * ```\n   */\n  function entityToEntityProto(entityObject) {\n    const properties = entityObject.data;\n    const entityProto = {\n      key: null,\n      properties: Object.keys(properties).reduce((encoded, key) => {\n        encoded[key] = entity.encodeValue(properties[key], key);\n        return encoded;\n      },\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      {})\n    };\n    addExcludeFromIndexes(entityObject.excludeFromIndexes, entityProto);\n    return entityProto;\n  }\n  entity_1.entityToEntityProto = entityToEntityProto;\n  /**\n   *\n   * @param {string[] | undefined} [entities.excludeFromIndexes] Exclude properties from\n   *     indexing using a simple JSON path notation. See the examples in\n   *     {@link Datastore#save} to see how to target properties at different\n   *     levels of nesting within your entity.\n   * @param {object} entityProto The protocol entity object to convert.\n   */\n  function addExcludeFromIndexes(excludeFromIndexes, entityProto) {\n    if (excludeFromIndexes && excludeFromIndexes.length > 0) {\n      excludeFromIndexes.forEach(excludePath => {\n        excludePathFromEntity(entityProto, excludePath);\n      });\n    }\n    return entityProto;\n    function excludePathFromEntity(entity, path) {\n      const arrayIndex = path.indexOf('[]');\n      const entityIndex = path.indexOf('.');\n      const wildcardIndex = path.indexOf('.*');\n      const hasArrayPath = arrayIndex > -1;\n      const hasEntityPath = entityIndex > -1;\n      const hasWildCard = wildcardIndex > -1;\n      if (!hasArrayPath && !hasEntityPath) {\n        // This is the path end node. Traversal ends here in either case.\n        if (entity.properties) {\n          if (entity.properties[path] &&\n          // array properties should be excluded with [] syntax:\n          !entity.properties[path].arrayValue) {\n            // This is the property to exclude!\n            entity.properties[path].excludeFromIndexes = true;\n          }\n        } else if (!path) {\n          // This is a primitive or entity root that should be excluded.\n          entity.excludeFromIndexes = true;\n        }\n        return;\n      }\n      let delimiterIndex;\n      if (hasArrayPath && hasEntityPath) {\n        delimiterIndex = Math.min(arrayIndex, entityIndex);\n      } else {\n        delimiterIndex = Math.max(arrayIndex, entityIndex);\n      }\n      const firstPathPartIsArray = delimiterIndex === arrayIndex;\n      const firstPathPartIsEntity = delimiterIndex === entityIndex;\n      const delimiter = firstPathPartIsArray ? '[]' : '.';\n      const splitPath = path.split(delimiter);\n      const firstPathPart = splitPath.shift();\n      const remainderPath = splitPath.join(delimiter).replace(/^(\\.|\\[\\])/, '');\n      if (!(entity.properties && entity.properties[firstPathPart]) && !hasWildCard) {\n        // Either a primitive or an entity for which this path doesn't apply.\n        return;\n      }\n      const isFirstPathPartDefined = entity.properties[firstPathPart] !== undefined;\n      if (firstPathPartIsArray && isFirstPathPartDefined &&\n      // check also if the property in question is actually an array value.\n      entity.properties[firstPathPart].arrayValue &&\n      // check if wildcard is not applied\n      !hasWildCard) {\n        const array = entity.properties[firstPathPart].arrayValue;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        array.values.forEach(value => {\n          if (remainderPath === '') {\n            // We want to exclude *this* array property, which is\n            // equivalent with excluding all its values\n            // (including entity values at their roots):\n            excludePathFromEntity(value, remainderPath // === ''\n            );\n          } else {\n            // Path traversal continues at value.entityValue,\n            // if it is an entity, or must end at value.\n            excludePathFromEntity(value.entityValue || value, remainderPath // !== ''\n            );\n          }\n        });\n      } else if (firstPathPartIsArray && hasWildCard && remainderPath === '*' && isFirstPathPartDefined) {\n        const array = entity.properties[firstPathPart].arrayValue;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        array.values.forEach(value => {\n          if (value.entityValue) {\n            excludePathFromEntity(value.entityValue, '.*');\n          } else {\n            excludePathFromEntity(value, '');\n          }\n        });\n      } else if (firstPathPartIsEntity) {\n        if (firstPathPart === '') {\n          Object.keys(entity.properties).forEach(path => {\n            const newPath = entity.properties[path].arrayValue ? path + '[].*' : path + '.*';\n            excludePathFromEntity(entity, newPath);\n          });\n        } else {\n          if (hasWildCard && remainderPath === '*' && isFirstPathPartDefined) {\n            const parentEntity = entity.properties[firstPathPart].entityValue;\n            if (parentEntity) {\n              Object.keys(parentEntity.properties).forEach(path => {\n                const newPath = parentEntity.properties[path].arrayValue ? path + '[].*' : path + '.*';\n                excludePathFromEntity(parentEntity, newPath);\n              });\n            } else {\n              excludePathFromEntity(entity, firstPathPart);\n            }\n          } else if (isFirstPathPartDefined) {\n            const parentEntity = entity.properties[firstPathPart].entityValue;\n            excludePathFromEntity(parentEntity, remainderPath);\n          }\n        }\n      }\n    }\n  }\n  entity_1.addExcludeFromIndexes = addExcludeFromIndexes;\n  /**\n   * Convert an API response array to a qualified Key and data object.\n   *\n   * @private\n   * @param {object[]} results The response array.\n   * @param {object} results.entity An entity object.\n   * @param {object} results.entity.key The entity's key.\n   * @param {boolean | IntegerTypeCastOptions} [wrapNumbers=false] Wrap values of integerValue type in\n   *     {@link Datastore#Int} objects.\n   *     If a `boolean`, this will wrap values in {@link Datastore#Int} objects.\n   *     If an `object`, this will return a value returned by\n   *     `wrapNumbers.integerTypeCastFunction`.\n   *     Please see {@link IntegerTypeCastOptions} for options descriptions.\n   *\n   * @example\n   * ```\n   * request_('runQuery', {}, (err, response) => {\n   *   const entityObjects = formatArray(response.batch.entityResults);\n   *   // {\n   *   //   key: {},\n   *   //   data: {\n   *   //     fieldName: 'value'\n   *   //   }\n   *   // }\n   *   //\n   * });\n   * ```\n   */\n  function formatArray(results, wrapNumbers) {\n    return results.map(result => {\n      const ent = entity.entityFromEntityProto(result.entity, wrapNumbers);\n      ent[entity.KEY_SYMBOL] = entity.keyFromKeyProto(result.entity.key);\n      return ent;\n    });\n  }\n  entity_1.formatArray = formatArray;\n  /**\n   * Find the properties which value size is large than 1500 bytes,\n   * with excludeLargeProperties enabled, automatically exclude properties from indexing.\n   * This will allow storing string values larger than 1500 bytes\n   *\n   * @param entities Datastore key object(s).\n   * @param path namespace of provided entity properties\n   * @param properties properties which value size is large than 1500 bytes\n   */\n  function findLargeProperties_(entities, path, properties = []) {\n    const MAX_DATASTORE_VALUE_LENGTH = 1500;\n    if (Array.isArray(entities)) {\n      for (const entry of entities) {\n        if (entry && entry.name && entry.value) {\n          if (is.string(entry.value) && Buffer.from(entry.value).length > MAX_DATASTORE_VALUE_LENGTH) {\n            entry.excludeFromIndexes = true;\n          } else {\n            continue;\n          }\n        }\n        findLargeProperties_(entry, path.concat('[]'), properties);\n      }\n    } else if (is.object(entities)) {\n      const keys = Object.keys(entities);\n      for (const key of keys) {\n        findLargeProperties_(entities[key], path.concat(`${path ? '.' : ''}${key}`), properties);\n      }\n    } else if (is.string(entities) && Buffer.from(entities).length > MAX_DATASTORE_VALUE_LENGTH) {\n      if (properties.indexOf(path) < 0) {\n        properties.push(path);\n      }\n    }\n    return properties;\n  }\n  entity_1.findLargeProperties_ = findLargeProperties_;\n  /**\n   * Check if a key is complete.\n   *\n   * @private\n   * @param {Key} key The Key object.\n   * @returns {boolean}\n   *\n   * @example\n   * ```\n   * isKeyComplete(new Key(['Company', 'Google'])); // true\n   * isKeyComplete(new Key('Company')); // false\n   * ```\n   */\n  function isKeyComplete(key) {\n    const lastPathElement = entity.keyToKeyProto(key).path.pop();\n    return !!(lastPathElement.id || lastPathElement.name);\n  }\n  entity_1.isKeyComplete = isKeyComplete;\n  /**\n   * Convert a key protocol object to a Key object.\n   *\n   * @private\n   * @param {object} keyProto The key protocol object to convert.\n   * @returns {Key}\n   *\n   * @example\n   * ```\n   * const key = keyFromKeyProto({\n   *   partitionId: {\n   *     projectId: 'project-id',\n   *     namespaceId: ''\n   *   },\n   *   path: [\n   *     {\n   *       kind: 'Kind',\n   *       id: '4790047639339008'\n   *     }\n   *   ]\n   * });\n   * ```\n   */\n  function keyFromKeyProto(keyProto) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const keyOptions = {\n      path: []\n    };\n    if (keyProto.partitionId && keyProto.partitionId.namespaceId) {\n      keyOptions.namespace = keyProto.partitionId.namespaceId;\n    }\n    keyProto.path.forEach((path, index) => {\n      keyOptions.path.push(path.kind);\n      let id = path[path.idType];\n      if (path.idType === 'id') {\n        id = new entity.Int(id);\n      }\n      if (is.defined(id)) {\n        keyOptions.path.push(id);\n      } else if (index < keyProto.path.length - 1) {\n        throw new InvalidKeyError({\n          code: 'MISSING_ANCESTOR_ID'\n        });\n      }\n    });\n    return new entity.Key(keyOptions);\n  }\n  entity_1.keyFromKeyProto = keyFromKeyProto;\n  /**\n   * Convert a Key object to a key protocol object.\n   *\n   * @private\n   * @param {Key} key The Key object to convert.\n   * @returns {object}\n   *\n   * @example\n   * ```\n   * const keyProto = keyToKeyProto(new Key(['Company', 1]));\n   * // {\n   * //   path: [\n   * //     {\n   * //       kind: 'Company',\n   * //       id: 1\n   * //     }\n   * //   ]\n   * // }\n   * ```\n   */\n  function keyToKeyProto(key) {\n    if (is.undefined(key.kind)) {\n      throw new InvalidKeyError({\n        code: 'MISSING_KIND'\n      });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const keyProto = {\n      path: []\n    };\n    if (key.namespace) {\n      keyProto.partitionId = {\n        namespaceId: key.namespace\n      };\n    }\n    let numKeysWalked = 0;\n    // Reverse-iterate over the Key objects.\n    do {\n      if (numKeysWalked > 0 && is.undefined(key.id) && is.undefined(key.name)) {\n        // This isn't just an incomplete key. An ancestor key is incomplete.\n        throw new InvalidKeyError({\n          code: 'MISSING_ANCESTOR_ID'\n        });\n      }\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const pathElement = {\n        kind: key.kind\n      };\n      if (is.defined(key.id)) {\n        pathElement.id = key.id;\n      }\n      if (is.defined(key.name)) {\n        pathElement.name = key.name;\n      }\n      keyProto.path.unshift(pathElement);\n    } while ((key = key.parent) && ++numKeysWalked);\n    return keyProto;\n  }\n  entity_1.keyToKeyProto = keyToKeyProto;\n  /**\n   * Convert a query object to a query protocol object.\n   *\n   * @private\n   * @param {object} q The query object to convert.\n   * @returns {object}\n   *\n   * @example\n   * ```\n   * queryToQueryProto({\n   *   namespace: '',\n   *   kinds: [\n   *     'Kind'\n   *   ],\n   *   filters: [],\n   *   orders: [],\n   *   groupByVal: [],\n   *   selectVal: [],\n   *   startVal: null,\n   *   endVal: null,\n   *   limitVal: -1,\n   *   offsetVal: -1\n   * });\n   * // {\n   * //   projection: [],\n   * //   kinds: [\n   * //     {\n   * //       name: 'Kind'\n   * //     }\n   * //   ],\n   * //   order: [],\n   * //   groupBy: []\n   * // }\n   * ```\n   */\n  function queryToQueryProto(query) {\n    const SIGN_TO_ORDER = {\n      '-': 'DESCENDING',\n      '+': 'ASCENDING'\n    };\n    const queryProto = {\n      distinctOn: query.groupByVal.map(groupBy => {\n        return {\n          name: groupBy\n        };\n      }),\n      kind: query.kinds.map(kind => {\n        return {\n          name: kind\n        };\n      }),\n      order: query.orders.map(order => {\n        return {\n          property: {\n            name: order.name\n          },\n          direction: SIGN_TO_ORDER[order.sign]\n        };\n      }),\n      projection: query.selectVal.map(select => {\n        return {\n          property: {\n            name: select\n          }\n        };\n      })\n    };\n    if (query.endVal) {\n      queryProto.endCursor = query.endVal;\n    }\n    if (query.limitVal > 0) {\n      queryProto.limit = {\n        value: query.limitVal\n      };\n    }\n    if (query.offsetVal > 0) {\n      queryProto.offset = query.offsetVal;\n    }\n    if (query.startVal) {\n      queryProto.startCursor = query.startVal;\n    }\n    // Check to see if there is at least one type of legacy filter or new filter.\n    if (query.filters.length > 0 || query.entityFilters.length > 0) {\n      // Convert all legacy filters into new property filter objects\n      const filters = query.filters.map(filter => new filter_1.PropertyFilter(filter.name, filter.op, filter.val));\n      const entityFilters = query.entityFilters;\n      const allFilters = entityFilters.concat(filters);\n      /*\n        To be consistent with prior implementation, apply an AND composite filter\n        to the collection of Filter objects. Then, set the filter property as before\n        to the output of the toProto method.\n       */\n      queryProto.filter = (0, filter_1.and)(allFilters).toProto();\n    }\n    return queryProto;\n  }\n  entity_1.queryToQueryProto = queryToQueryProto;\n  /**\n   * URL safe key encoding and decoding helper utility.\n   *\n   *  This is intended to work with the \"legacy\" representation of a\n   * datastore \"Key\" used within Google App Engine (a so-called \"Reference\").\n   *\n   * @private\n   * @class\n   */\n  class URLSafeKey {\n    constructor() {\n      this.protos = this.loadProtos_();\n    }\n    /**\n     *  Load AppEngine protobuf file.\n     *\n     *  @private\n     */\n    loadProtos_() {\n      const root = new google_gax_1.protobuf.Root();\n      const loadedRoot = root.loadSync(path.join(__dirname, '..', 'protos', 'app_engine_key.proto'));\n      loadedRoot.resolveAll();\n      return loadedRoot.nested;\n    }\n    /**\n     * Convert key to url safe base64 encoded string.\n     *\n     * @private\n     * @param {string} projectId Project Id.\n     * @param {entity.Key} key Entity key object.\n     * @param {string} locationPrefix Optional .\n     *  The location prefix of an App Engine project ID.\n     *  Often this value is 's~', but may also be 'e~', or other location prefixes\n     *  currently unknown.\n     * @returns {string} base64 endocded urlsafe key.\n     */\n    legacyEncode(projectId, key, locationPrefix) {\n      const elements = [];\n      let currentKey = key;\n      do {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const element = {\n          type: currentKey.kind\n        };\n        if (is.defined(currentKey.id)) {\n          element.id = currentKey.id;\n        }\n        if (is.defined(currentKey.name)) {\n          element.name = currentKey.name;\n        }\n        elements.unshift(element);\n        currentKey = currentKey.parent;\n      } while (currentKey);\n      if (locationPrefix) {\n        projectId = `${locationPrefix}${projectId}`;\n      }\n      const reference = {\n        app: projectId,\n        namespace: key.namespace,\n        path: {\n          element: elements\n        }\n      };\n      const buffer = this.protos.Reference.encode(reference).finish();\n      return this.convertToBase64_(buffer);\n    }\n    /**\n     * Helper to convert URL safe key string to entity key object\n     *\n     * This is intended to work with the \"legacy\" representation of a\n     * datastore \"Key\" used within Google App Engine (a so-called \"Reference\").\n     *\n     * @private\n     * @param {entity.Key} key Entity key object.\n     * @param {string} locationPrefix Optional .\n     *  The location prefix of an App Engine project ID.\n     *  Often this value is 's~', but may also be 'e~', or other location prefixes\n     *  currently unknown.\n     * @returns {string} Created urlsafe key.\n     */\n    legacyDecode(key) {\n      const buffer = this.convertToBuffer_(key);\n      const message = this.protos.Reference.decode(buffer);\n      const reference = this.protos.Reference.toObject(message, {\n        longs: String\n      });\n      const pathElements = [];\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      reference.path.element.forEach(element => {\n        pathElements.push(element.type);\n        if (is.defined(element.name)) {\n          pathElements.push(element.name);\n        }\n        if (is.defined(element.id)) {\n          pathElements.push(new entity.Int(element.id));\n        }\n      });\n      const keyOptions = {\n        path: pathElements\n      };\n      if (!is.empty(reference.namespace)) {\n        keyOptions.namespace = reference.namespace;\n      }\n      return new entity.Key(keyOptions);\n    }\n    /**\n     * Convert buffer to base64 encoding.\n     *\n     * @private\n     * @param {Buffer} buffer The buffer to convert\n     * @returns {string} Base64 encoded string.\n     */\n    convertToBase64_(buffer) {\n      return buffer.toString('base64').replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+$/, '');\n    }\n    /**\n     * Rebuild base64 from encoded url safe string and convert to buffer.\n     *\n     * @private\n     * @param {string} val Encoded url safe string.\n     * @returns {string} Base64 encoded string.\n     */\n    convertToBuffer_(val) {\n      val = val.replace(/-/g, '+').replace(/_/g, '/');\n      val += '='.repeat(val.length % 4);\n      return Buffer.from(val, 'base64');\n    }\n  }\n  entity_1.URLSafeKey = URLSafeKey;\n})(entity || (exports.entity = entity = {}));","map":{"version":3,"names":["arrify","require","extend","is","google_gax_1","path","filter_1","entity","entity_1","InvalidKeyError","Error","constructor","opts","errorMessages","MISSING_KIND","MISSING_ANCESTOR_ID","code","name","KEY_SYMBOL","Symbol","Double","value","type","isDsDouble","isDsDoubleLike","maybeDsDouble","object","number","Int","Number","typeCastOptions","integerValue","_entityPropertyName","propertyName","undefined","toString","typeCastFunction","integerTypeCastFunction","typeCastProperties","properties","valueOf","shouldCustomCast","includes","error","message","decodeIntegerValue","toJSON","isDsInt","isDsIntLike","maybeDsInt","string","GeoPoint","coordinates","isDsGeoPoint","Key","options","namespace","slice","call","length","identifier","pop","id","kind","parent","Object","defineProperty","enumerable","get","concat","serialized","serializedKey","isDsKey","num","isSafeInteger","decodeValueProto","valueProto","wrapNumbers","valueType","values","map","val","Buffer","from","entityFromEntityProto","keyFromKeyProto","milliseconds","nanos","Date","seconds","encodeValue","property","boolean","booleanValue","null","nullValue","isInteger","process","emitWarning","doubleValue","geoPointValue","getTime","timestampValue","Math","floor","getMilliseconds","stringValue","blobValue","Array","isArray","arrayValue","keyValue","keyToKeyProto","empty","prop","entityValue","entityProto","entityObject","entityToEntityProto","data","key","keys","reduce","encoded","addExcludeFromIndexes","excludeFromIndexes","forEach","excludePath","excludePathFromEntity","arrayIndex","indexOf","entityIndex","wildcardIndex","hasArrayPath","hasEntityPath","hasWildCard","delimiterIndex","min","max","firstPathPartIsArray","firstPathPartIsEntity","delimiter","splitPath","split","firstPathPart","shift","remainderPath","join","replace","isFirstPathPartDefined","array","newPath","parentEntity","formatArray","results","result","ent","findLargeProperties_","entities","MAX_DATASTORE_VALUE_LENGTH","entry","push","isKeyComplete","lastPathElement","keyProto","keyOptions","partitionId","namespaceId","index","idType","defined","numKeysWalked","pathElement","unshift","queryToQueryProto","query","SIGN_TO_ORDER","queryProto","distinctOn","groupByVal","groupBy","kinds","order","orders","direction","sign","projection","selectVal","select","endVal","endCursor","limitVal","limit","offsetVal","offset","startVal","startCursor","filters","entityFilters","filter","PropertyFilter","op","allFilters","and","toProto","URLSafeKey","protos","loadProtos_","root","protobuf","Root","loadedRoot","loadSync","__dirname","resolveAll","nested","legacyEncode","projectId","locationPrefix","elements","currentKey","element","reference","app","buffer","Reference","encode","finish","convertToBase64_","legacyDecode","convertToBuffer_","decode","toObject","longs","String","pathElements","repeat","exports"],"sources":["../../src/entity.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}