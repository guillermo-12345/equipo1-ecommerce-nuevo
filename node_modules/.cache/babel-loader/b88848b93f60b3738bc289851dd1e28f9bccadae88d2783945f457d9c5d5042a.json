{"ast":null,"code":"\"use strict\";\n\n/*!\n * Copyright 2014 Google LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Transaction_instances, _Transaction_mutex, _Transaction_runCommit, _Transaction_processBeginResults, _Transaction_beginTransactionAsync, _Transaction_withBeginTransaction, _Transaction_blockWithMutex;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Transaction = void 0;\nconst promisify_1 = require(\"@google-cloud/promisify\");\nconst _1 = require(\".\");\nconst entity_1 = require(\"./entity\");\nconst request_1 = require(\"./request\");\nconst async_mutex_1 = require(\"async-mutex\");\nconst arrify = require(\"arrify\");\n/**\n * A transaction is a set of Datastore operations on one or more entities. Each\n * transaction is guaranteed to be atomic, which means that transactions are\n * never partially applied. Either all of the operations in the transaction are\n * applied, or none of them are applied.\n *\n * @see {@link https://cloud.google.com/datastore/docs/concepts/transactions| Transactions Reference}\n *\n * @class\n * @extends {Request}\n * @param {Datastore} datastore A Datastore instance.\n * @mixes module:datastore/request\n *\n * @example\n * ```\n * const {Datastore} = require('@google-cloud/datastore');\n * const datastore = new Datastore();\n * const transaction = datastore.transaction();\n * ```\n */\nclass Transaction extends request_1.DatastoreRequest {\n  constructor(datastore, options) {\n    super();\n    _Transaction_instances.add(this);\n    _Transaction_mutex.set(this, new async_mutex_1.Mutex());\n    /**\n     * @name Transaction#datastore\n     * @type {Datastore}\n     */\n    this.datastore = datastore;\n    /**\n     * @name Transaction#namespace\n     * @type {string}\n     */\n    this.namespace = datastore.namespace;\n    options = options || {};\n    this.id = options.id;\n    this.readOnly = options.readOnly === true;\n    this.request = datastore.request_.bind(datastore);\n    // A queue for entity modifications made during the transaction.\n    this.modifiedEntities_ = [];\n    // Queue the callbacks that process the API responses.\n    this.requestCallbacks_ = [];\n    // Queue the requests to make when we send the transactional commit.\n    this.requests_ = [];\n    this.state = request_1.TransactionState.NOT_STARTED;\n  }\n  commit(gaxOptionsOrCallback, cb) {\n    const callback = typeof gaxOptionsOrCallback === 'function' ? gaxOptionsOrCallback : typeof cb === 'function' ? cb : () => {};\n    const gaxOptions = typeof gaxOptionsOrCallback === 'object' ? gaxOptionsOrCallback : {};\n    if (this.state === request_1.TransactionState.EXPIRED) {\n      callback(new Error(request_1.transactionExpiredError));\n      return;\n    }\n    // This ensures that the transaction is started before calling runCommit\n    __classPrivateFieldGet(this, _Transaction_instances, \"m\", _Transaction_withBeginTransaction).call(this, gaxOptions, () => {\n      __classPrivateFieldGet(this, _Transaction_instances, \"m\", _Transaction_runCommit).call(this, gaxOptions, callback);\n    }, callback);\n  }\n  createQuery(namespaceOrKind, kind) {\n    return this.datastore.createQuery.call(this, namespaceOrKind, kind);\n  }\n  /**\n   * Create an aggregation query from the query specified. See {module:datastore/query} for all\n   * of the available methods.\n   *\n   */\n  createAggregationQuery(query) {\n    return this.datastore.createAggregationQuery.call(this, query);\n  }\n  /**\n   * Delete all entities identified with the specified key(s) in the current\n   * transaction.\n   *\n   * @param {Key|Key[]} key Datastore key object(s).\n   *\n   * @example\n   * ```\n   * const {Datastore} = require('@google-cloud/datastore');\n   * const datastore = new Datastore();\n   * const transaction = datastore.transaction();\n   *\n   * transaction.run((err) => {\n   *   if (err) {\n   *     // Error handling omitted.\n   *   }\n   *\n   *   // Delete a single entity.\n   *   transaction.delete(datastore.key(['Company', 123]));\n   *\n   *   // Delete multiple entities at once.\n   *   transaction.delete([\n   *     datastore.key(['Company', 123]),\n   *     datastore.key(['Product', 'Computer'])\n   *   ]);\n   *\n   *   transaction.commit((err) => {\n   *     if (!err) {\n   *       // Transaction committed successfully.\n   *     }\n   *   });\n   * });\n   * ```\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  delete(entities) {\n    arrify(entities).forEach(ent => {\n      this.modifiedEntities_.push({\n        entity: {\n          key: ent\n        },\n        method: 'delete',\n        args: [ent]\n      });\n    });\n  }\n  get(keys, optionsOrCallback, cb) {\n    const options = typeof optionsOrCallback === 'object' && optionsOrCallback ? optionsOrCallback : {};\n    const callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : cb;\n    // This ensures that the transaction is started before calling get\n    __classPrivateFieldGet(this, _Transaction_instances, \"m\", _Transaction_blockWithMutex).call(this, () => {\n      super.get(keys, options, callback);\n    });\n  }\n  /**\n   * Maps to {@link https://cloud.google.com/nodejs/docs/reference/datastore/latest/datastore/transaction#_google_cloud_datastore_Transaction_save_member_1_|Datastore#save}, forcing the method to be `insert`.\n   *\n   * @param {object|object[]} entities Datastore key object(s).\n   * @param {Key} entities.key Datastore key object.\n   * @param {string[]} [entities.excludeFromIndexes] Exclude properties from\n   *     indexing using a simple JSON path notation. See the examples in\n   *     {@link Datastore#save} to see how to target properties at different\n   *     levels of nesting within your entity.\n   * @param {object} entities.data Data to save with the provided key.\n   */\n  insert(entities) {\n    entities = arrify(entities).map(request_1.DatastoreRequest.prepareEntityObject_).map(x => {\n      x.method = 'insert';\n      return x;\n    });\n    this.save(entities);\n  }\n  rollback(gaxOptionsOrCallback, cb) {\n    const gaxOptions = typeof gaxOptionsOrCallback === 'object' ? gaxOptionsOrCallback : {};\n    const callback = typeof gaxOptionsOrCallback === 'function' ? gaxOptionsOrCallback : cb;\n    if (this.state === request_1.TransactionState.EXPIRED) {\n      callback(new Error(request_1.transactionExpiredError));\n      return;\n    }\n    if (this.state === request_1.TransactionState.NOT_STARTED) {\n      callback(new Error('Transaction is not started'));\n      return;\n    }\n    this.request_({\n      client: 'DatastoreClient',\n      method: 'rollback',\n      gaxOpts: gaxOptions || {}\n    }, (err, resp) => {\n      this.skipCommit = true;\n      this.state = request_1.TransactionState.EXPIRED;\n      callback(err || null, resp);\n    });\n  }\n  run(optionsOrCallback, cb) {\n    const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n    const callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : cb;\n    __classPrivateFieldGet(this, _Transaction_mutex, \"f\").runExclusive(async () => {\n      if (this.state === request_1.TransactionState.NOT_STARTED) {\n        const runResults = await __classPrivateFieldGet(this, _Transaction_instances, \"m\", _Transaction_beginTransactionAsync).call(this, options);\n        __classPrivateFieldGet(this, _Transaction_instances, \"m\", _Transaction_processBeginResults).call(this, runResults, callback);\n      } else {\n        process.emitWarning('run has already been called and should not be called again.');\n        callback(null, this, {\n          transaction: this.id\n        });\n      }\n    });\n  }\n  runAggregationQuery(query, optionsOrCallback, cb) {\n    const options = typeof optionsOrCallback === 'object' && optionsOrCallback ? optionsOrCallback : {};\n    const callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : cb;\n    // This ensures that the transaction is started before calling runAggregationQuery\n    __classPrivateFieldGet(this, _Transaction_instances, \"m\", _Transaction_blockWithMutex).call(this, () => {\n      super.runAggregationQuery(query, options, callback);\n    });\n  }\n  runQuery(query, optionsOrCallback, cb) {\n    const options = typeof optionsOrCallback === 'object' && optionsOrCallback ? optionsOrCallback : {};\n    const callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : cb;\n    // This ensures that the transaction is started before calling runQuery\n    __classPrivateFieldGet(this, _Transaction_instances, \"m\", _Transaction_blockWithMutex).call(this, () => {\n      super.runQuery(query, options, callback);\n    });\n  }\n  /**\n   * Insert or update the specified object(s) in the current transaction. If a\n   * key is incomplete, its associated object is inserted and the original Key\n   * object is updated to contain the generated ID.\n   *\n   * This method will determine the correct Datastore method to execute\n   * (`upsert`, `insert`, or `update`) by using the key(s) provided. For\n   * example, if you provide an incomplete key (one without an ID), the request\n   * will create a new entity and have its ID automatically assigned. If you\n   * provide a complete key, the entity will be updated with the data specified.\n   *\n   * By default, all properties are indexed. To prevent a property from being\n   * included in *all* indexes, you must supply an `excludeFromIndexes` array.\n   * See below for an example.\n   *\n   * @param {object|object[]} entities Datastore key object(s).\n   * @param {Key} entities.key Datastore key object.\n   * @param {string[]} [entities.excludeFromIndexes] Exclude properties from\n   *     indexing using a simple JSON path notation. See the example below to\n   * see how to target properties at different levels of nesting within your\n   *     entity.\n   * @param {object} entities.data Data to save with the provided key.\n   *\n   * @example\n   * ```\n   * <caption>Save a single entity.</caption>\n   * const {Datastore} = require('@google-cloud/datastore');\n   * const datastore = new Datastore();\n   * const transaction = datastore.transaction();\n   *\n   * // Notice that we are providing an incomplete key. After the transaction is\n   * // committed, the Key object held by the `key` variable will be populated\n   * // with a path containing its generated ID.\n   * //-\n   * const key = datastore.key('Company');\n   *\n   * transaction.run((err) => {\n   *   if (err) {\n   *     // Error handling omitted.\n   *   }\n   *\n   *   transaction.save({\n   *     key: key,\n   *     data: {\n   *       rating: '10'\n   *     }\n   *   });\n   *\n   *   transaction.commit((err) => {\n   *     if (!err) {\n   *       // Data saved successfully.\n   *     }\n   *   });\n   * });\n   *\n   * ```\n   * @example\n   * ```\n   * const {Datastore} = require('@google-cloud/datastore');\n   * const datastore = new Datastore();\n   * const transaction = datastore.transaction();\n   *\n   * // Use an array, `excludeFromIndexes`, to exclude properties from indexing.\n   * // This will allow storing string values larger than 1500 bytes.\n   *\n   * transaction.run((err) => {\n   *   if (err) {\n   *     // Error handling omitted.\n   *   }\n   *\n   *   transaction.save({\n   *     key: key,\n   *     excludeFromIndexes: [\n   *       'description',\n   *       'embeddedEntity.description',\n   *       'arrayValue[].description'\n   *     ],\n   *     data: {\n   *       description: 'Long string (...)',\n   *       embeddedEntity: {\n   *         description: 'Long string (...)'\n   *       },\n   *       arrayValue: [\n   *         {\n   *           description: 'Long string (...)'\n   *         }\n   *       ]\n   *     }\n   *   });\n   *\n   *   transaction.commit((err) => {\n   *     if (!err) {\n   *       // Data saved successfully.\n   *     }\n   *   });\n   * });\n   *\n   * ```\n   * @example\n   * ```\n   * <caption>Save multiple entities at once.</caption>\n   * const {Datastore} = require('@google-cloud/datastore');\n   * const datastore = new Datastore();\n   * const transaction = datastore.transaction();\n   * const companyKey = datastore.key(['Company', 123]);\n   * const productKey = datastore.key(['Product', 'Computer']);\n   *\n   * transaction.run((err) => {\n   *   if (err) {\n   *     // Error handling omitted.\n   *   }\n   *\n   *   transaction.save([\n   *     {\n   *       key: companyKey,\n   *       data: {\n   *         HQ: 'Dallas, TX'\n   *       }\n   *     },\n   *     {\n   *       key: productKey,\n   *       data: {\n   *         vendor: 'Dell'\n   *       }\n   *     }\n   *   ]);\n   *\n   *   transaction.commit((err) => {\n   *     if (!err) {\n   *       // Data saved successfully.\n   *     }\n   *   });\n   * });\n   * ```\n   */\n  save(entities) {\n    arrify(entities).forEach(ent => {\n      this.modifiedEntities_.push({\n        entity: {\n          key: ent.key\n        },\n        method: 'save',\n        args: [ent]\n      });\n    });\n  }\n  /**\n   * Maps to {@link https://cloud.google.com/nodejs/docs/reference/datastore/latest/datastore/transaction#_google_cloud_datastore_Transaction_save_member_1_|Datastore#save}, forcing the method to be `update`.\n   *\n   * @param {object|object[]} entities Datastore key object(s).\n   * @param {Key} entities.key Datastore key object.\n   * @param {string[]} [entities.excludeFromIndexes] Exclude properties from\n   *     indexing using a simple JSON path notation. See the examples in\n   *     {@link Datastore#save} to see how to target properties at different\n   *     levels of nesting within your entity.\n   * @param {object} entities.data Data to save with the provided key.\n   */\n  update(entities) {\n    entities = arrify(entities).map(request_1.DatastoreRequest.prepareEntityObject_).map(x => {\n      x.method = 'update';\n      return x;\n    });\n    this.save(entities);\n  }\n  /**\n   * Maps to {@link https://cloud.google.com/nodejs/docs/reference/datastore/latest/datastore/transaction#_google_cloud_datastore_Transaction_save_member_1_|Datastore#save}, forcing the method to be `upsert`.\n   *\n   * @param {object|object[]} entities Datastore key object(s).\n   * @param {Key} entities.key Datastore key object.\n   * @param {string[]} [entities.excludeFromIndexes] Exclude properties from\n   *     indexing using a simple JSON path notation. See the examples in\n   *     {@link Datastore#save} to see how to target properties at different\n   *     levels of nesting within your entity.\n   * @param {object} entities.data Data to save with the provided key.\n   */\n  upsert(entities) {\n    entities = arrify(entities).map(request_1.DatastoreRequest.prepareEntityObject_).map(x => {\n      x.method = 'upsert';\n      return x;\n    });\n    this.save(entities);\n  }\n}\nexports.Transaction = Transaction;\n_Transaction_mutex = new WeakMap(), _Transaction_instances = new WeakSet(), _Transaction_runCommit = function _Transaction_runCommit(gaxOptions, callback) {\n  if (this.skipCommit) {\n    setImmediate(callback);\n    return;\n  }\n  const keys = {};\n  this.modifiedEntities_\n  // Reverse the order of the queue to respect the \"last queued request\n  // wins\" behavior.\n  .reverse()\n  // Limit the operations we're going to send through to only the most\n  // recently queued operations. E.g., if a user tries to save with the\n  // same key they just asked to be deleted, the delete request will be\n  // ignored, giving preference to the save operation.\n  .filter(modifiedEntity => {\n    const key = modifiedEntity.entity.key;\n    if (!entity_1.entity.isKeyComplete(key)) return true;\n    const stringifiedKey = JSON.stringify(modifiedEntity.entity.key);\n    if (!keys[stringifiedKey]) {\n      keys[stringifiedKey] = true;\n      return true;\n    }\n    return false;\n  })\n  // Group entities together by method: `save` mutations, then `delete`.\n  // Note: `save` mutations being first is required to maintain order when\n  // assigning IDs to incomplete keys.\n  .sort((a, b) => {\n    return a.method < b.method ? 1 : a.method > b.method ? -1 : 0;\n  })\n  // Group arguments together so that we only make one call to each\n  // method. This is important for `DatastoreRequest.save`, especially, as\n  // that method handles assigning auto-generated IDs to the original keys\n  // passed in. When we eventually execute the `save` method's API\n  // callback, having all the keys together is necessary to maintain\n  // order.\n  .reduce((acc, entityObject) => {\n    const lastEntityObject = acc[acc.length - 1];\n    const sameMethod = lastEntityObject && entityObject.method === lastEntityObject.method;\n    if (!lastEntityObject || !sameMethod) {\n      acc.push(entityObject);\n    } else {\n      lastEntityObject.args = lastEntityObject.args.concat(entityObject.args);\n    }\n    return acc;\n  }, [])\n  // Call each of the mutational methods (DatastoreRequest[save,delete])\n  // to build up a `req` array on this instance. This will also build up a\n  // `callbacks` array, that is the same callback that would run if we\n  // were using `save` and `delete` outside of a transaction, to process\n  // the response from the API.\n  .forEach(modifiedEntity => {\n    const method = modifiedEntity.method;\n    const args = modifiedEntity.args.reverse();\n    _1.Datastore.prototype[method].call(this, args, () => {});\n  });\n  // Take the `req` array built previously, and merge them into one request to\n  // send as the final transactional commit.\n  const reqOpts = {\n    mutations: this.requests_.map(x => x.mutations).reduce((a, b) => a.concat(b), [])\n  };\n  this.request_({\n    client: 'DatastoreClient',\n    method: 'commit',\n    reqOpts,\n    gaxOpts: gaxOptions || {}\n  }, (err, resp) => {\n    if (err) {\n      // Rollback automatically for the user.\n      this.rollback(() => {\n        // Provide the error & API response from the failed commit to the\n        // user. Even a failed rollback should be transparent. RE:\n        // https://github.com/GoogleCloudPlatform/google-cloud-node/pull/1369#discussion_r66833976\n        callback(err, resp);\n      });\n      return;\n    }\n    this.state = request_1.TransactionState.EXPIRED;\n    // The `callbacks` array was built previously. These are the callbacks\n    // that handle the API response normally when using the\n    // DatastoreRequest.save and .delete methods.\n    this.requestCallbacks_.forEach(cb => {\n      cb(null, resp);\n    });\n    callback(null, resp);\n  });\n}, _Transaction_processBeginResults = function _Transaction_processBeginResults(runResults, callback) {\n  const err = runResults.err;\n  const resp = runResults.resp;\n  if (err) {\n    callback(err, null, resp);\n  } else {\n    this.parseTransactionResponse(resp);\n    callback(null, this, resp);\n  }\n}, _Transaction_beginTransactionAsync =\n/**\n * This async function makes a beginTransaction call and returns a promise with\n * the information returned from the call that was made.\n *\n * @param {RunOptions} options The options used for a beginTransaction call.\n * @returns {Promise<RequestPromiseReturnType>}\n *\n *\n **/\nasync function _Transaction_beginTransactionAsync(options) {\n  return new Promise(resolve => {\n    const reqOpts = {\n      transactionOptions: (0, request_1.getTransactionRequest)(this, options)\n    };\n    this.request_({\n      client: 'DatastoreClient',\n      method: 'beginTransaction',\n      reqOpts,\n      gaxOpts: options.gaxOptions\n    },\n    // Always use resolve because then this function can return both the error and the response\n    (err, resp) => {\n      resolve({\n        err,\n        resp\n      });\n    });\n  });\n}, _Transaction_withBeginTransaction = function _Transaction_withBeginTransaction(gaxOptions, fn, callback) {\n  (async () => {\n    if (this.state === request_1.TransactionState.NOT_STARTED) {\n      try {\n        await __classPrivateFieldGet(this, _Transaction_mutex, \"f\").runExclusive(async () => {\n          if (this.state === request_1.TransactionState.NOT_STARTED) {\n            // This sends an rpc call to get the transaction id\n            const runResults = await __classPrivateFieldGet(this, _Transaction_instances, \"m\", _Transaction_beginTransactionAsync).call(this, {\n              gaxOptions\n            });\n            if (runResults.err) {\n              // The rpc getting the id was unsuccessful.\n              // Do not call the wrapped function.\n              throw runResults.err;\n            }\n            this.parseTransactionResponse(runResults.resp);\n            // The rpc saving the transaction id was successful.\n            // Now the wrapped function fn will be called.\n          }\n        });\n      } catch (err) {\n        // Handle an error produced by the beginTransactionAsync call\n        return callback(err);\n      }\n    }\n    return fn();\n  })();\n}, _Transaction_blockWithMutex = function _Transaction_blockWithMutex(fn) {\n  (async () => {\n    if (this.state === request_1.TransactionState.NOT_STARTED) {\n      await __classPrivateFieldGet(this, _Transaction_mutex, \"f\").runExclusive(async () => {\n        fn();\n      });\n    } else {\n      fn();\n    }\n  })();\n};\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\n(0, promisify_1.promisifyAll)(Transaction, {\n  exclude: ['createAggregationQuery', 'createQuery', 'delete', 'insert', '#runAsync', 'save', 'update', 'upsert']\n});","map":{"version":3,"names":["promisify_1","require","_1","entity_1","request_1","async_mutex_1","arrify","Transaction","DatastoreRequest","constructor","datastore","options","_Transaction_mutex","set","Mutex","namespace","id","readOnly","request","request_","bind","modifiedEntities_","requestCallbacks_","requests_","state","TransactionState","NOT_STARTED","commit","gaxOptionsOrCallback","cb","callback","gaxOptions","EXPIRED","Error","transactionExpiredError","__classPrivateFieldGet","_Transaction_instances","_Transaction_withBeginTransaction","call","_Transaction_runCommit","createQuery","namespaceOrKind","kind","createAggregationQuery","query","delete","entities","forEach","ent","push","entity","key","method","args","get","keys","optionsOrCallback","_Transaction_blockWithMutex","insert","map","prepareEntityObject_","x","save","rollback","client","gaxOpts","err","resp","skipCommit","run","runExclusive","runResults","_Transaction_beginTransactionAsync","_Transaction_processBeginResults","process","emitWarning","transaction","runAggregationQuery","runQuery","update","upsert","exports","setImmediate","reverse","filter","modifiedEntity","isKeyComplete","stringifiedKey","JSON","stringify","sort","a","b","reduce","acc","entityObject","lastEntityObject","length","sameMethod","concat","Datastore","prototype","reqOpts","mutations","parseTransactionResponse","Promise","resolve","transactionOptions","getTransactionRequest","fn","promisifyAll","exclude"],"sources":["../../src/transaction.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}