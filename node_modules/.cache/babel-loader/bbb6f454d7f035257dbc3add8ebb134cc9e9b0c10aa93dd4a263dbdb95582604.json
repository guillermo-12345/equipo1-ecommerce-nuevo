{"ast":null,"code":"\"use strict\";\n\n/*!\n * Copyright 2014 Google LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Query = void 0;\nconst arrify = require(\"arrify\");\nconst filter_1 = require(\"./filter\");\nconst gaxInstance = require(\"google-gax\");\n/**\n * A Query object is used to build and execute queries for entities stored in Datastore.\n *\n * Create a Query object with {@link Datastore#createQuery} or\n * {@link Transaction#createQuery}.\n *\n * @see {@link http://goo.gl/Cag0r6| Datastore Queries}\n *\n * @class\n * @param {Datastore|Transaction} scope The parent scope the query was created\n *     from.\n * @param {string} [namespace] Namespace to query entities from.\n * @param {string[]} kinds Kind to query.\n *\n * @example\n * ```\n * const {Datastore} = require('@google-cloud/datastore');\n * const datastore = new Datastore();\n * const query = datastore.createQuery('AnimalNamespace', 'Lion');\n * ```\n */\nclass Query {\n  constructor(scope, namespaceOrKinds, kinds) {\n    let namespace = namespaceOrKinds;\n    if (!kinds) {\n      kinds = namespaceOrKinds;\n      namespace = null;\n    }\n    /**\n     * @name Query#scope\n     * @type {Datastore|Transaction}\n     */\n    this.scope = scope;\n    /**\n     * @name Query#namespace\n     * @type {?string}\n     */\n    this.namespace = namespace || null;\n    /**\n     * @name Query#kinds\n     * @type {string}\n     */\n    this.kinds = kinds;\n    /**\n     * @name Query#filters\n     * @type {array}\n     */\n    this.filters = [];\n    /**\n     * @name Query#entityFilters\n     * @type {array}\n     */\n    this.entityFilters = [];\n    /**\n     * @name Query#orders\n     * @type {array}\n     */\n    this.orders = [];\n    /**\n     * @name Query#groupByVal\n     * @type {array}\n     */\n    this.groupByVal = [];\n    /**\n     * @name Query#selectVal\n     * @type {array}\n     */\n    this.selectVal = [];\n    // pagination\n    /**\n     * @name Query#startVal\n     * @type {?number}\n     */\n    this.startVal = null;\n    /**\n     * @name Query#endVal\n     * @type {?number}\n     */\n    this.endVal = null;\n    /**\n     * @name Query#limitVal\n     * @type {number}\n     */\n    this.limitVal = -1;\n    /**\n     * @name Query#offsetVal\n     * @type {number}\n     */\n    this.offsetVal = -1;\n  }\n  filter(propertyOrFilter, operatorOrValue, value) {\n    if (arguments.length > 1) {\n      gaxInstance.warn('filter', 'Providing Filter objects like Composite Filter or Property Filter is recommended when using .filter');\n    }\n    switch (arguments.length) {\n      case 1:\n        {\n          if ((0, filter_1.isFilter)(propertyOrFilter)) {\n            this.entityFilters.push(propertyOrFilter);\n          }\n          break;\n        }\n      case 2:\n        {\n          this.filters.push({\n            name: propertyOrFilter.trim(),\n            op: '=',\n            val: operatorOrValue\n          });\n          break;\n        }\n      case 3:\n        {\n          this.filters.push({\n            name: propertyOrFilter.trim(),\n            op: operatorOrValue.trim(),\n            val: value\n          });\n        }\n    }\n    return this;\n  }\n  /**\n   * Filter a query by ancestors.\n   *\n   * @see {@link https://cloud.google.com/datastore/docs/concepts/queries#datastore-ancestor-query-nodejs| Datastore Ancestor Filters}\n   *\n   * @param {Key} key Key object to filter by.\n   * @returns {Query}\n   *\n   * @example\n   * ```\n   * const {Datastore} = require('@google-cloud/datastore');\n   * const datastore = new Datastore();\n   * const query = datastore.createQuery('MyKind');\n   * const ancestoryQuery = query.hasAncestor(datastore.key(['Parent', 123]));\n   * ```\n   */\n  hasAncestor(key) {\n    this.filters.push({\n      name: '__key__',\n      op: 'HAS_ANCESTOR',\n      val: key\n    });\n    return this;\n  }\n  /**\n   * Sort the results by a property name in ascending or descending order. By\n   * default, an ascending sort order will be used.\n   *\n   * @see {@link https://cloud.google.com/datastore/docs/concepts/queries#datastore-ascending-sort-nodejs| Datastore Sort Orders}\n   *\n   * @param {string} property The property to order by.\n   * @param {object} [options] Options object.\n   * @param {boolean} [options.descending=false] Sort the results by a property\n   *     name in descending order.\n   * @returns {Query}\n   *\n   * @example\n   * ```\n   * const {Datastore} = require('@google-cloud/datastore');\n   * const datastore = new Datastore();\n   * const companyQuery = datastore.createQuery('Company');\n   *\n   * // Sort by size ascendingly.\n   * const companiesAscending = companyQuery.order('size');\n   *\n   * // Sort by size descendingly.\n   * const companiesDescending = companyQuery.order('size', {\n   *   descending: true\n   * });\n   * ```\n   */\n  order(property, options) {\n    const sign = options && options.descending ? '-' : '+';\n    this.orders.push({\n      name: property,\n      sign\n    });\n    return this;\n  }\n  /**\n   * Group query results by a list of properties.\n   *\n   * @param {array} properties Properties to group by.\n   * @returns {Query}\n   *\n   * @example\n   * ```\n   * const {Datastore} = require('@google-cloud/datastore');\n   * const datastore = new Datastore();\n   * const companyQuery = datastore.createQuery('Company');\n   * const groupedQuery = companyQuery.groupBy(['name', 'size']);\n   * ```\n   */\n  groupBy(fieldNames) {\n    this.groupByVal = arrify(fieldNames);\n    return this;\n  }\n  /**\n   * Retrieve only select properties from the matched entities.\n   *\n   * Queries that select a subset of properties are called Projection Queries.\n   *\n   * @see {@link https://cloud.google.com/datastore/docs/samples/datastore-projection-query| Projection Queries}\n   *\n   * @param {string|string[]} fieldNames Properties to return from the matched\n   *     entities.\n   * @returns {Query}\n   *\n   * @example\n   * ```\n   * const {Datastore} = require('@google-cloud/datastore');\n   * const datastore = new Datastore();\n   * const companyQuery = datastore.createQuery('Company');\n   *\n   * // Only retrieve the name property.\n   * const selectQuery = companyQuery.select('name');\n   *\n   * // Only retrieve the name and size properties.\n   * const selectQuery = companyQuery.select(['name', 'size']);\n   * ```\n   */\n  select(fieldNames) {\n    this.selectVal = arrify(fieldNames);\n    return this;\n  }\n  /**\n   * Set a starting cursor to a query.\n   *\n   * @see {@link https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets| Query Cursors}\n   *\n   * @param {string} cursorToken The starting cursor token.\n   * @returns {Query}\n   *\n   * @example\n   * ```\n   * const {Datastore} = require('@google-cloud/datastore');\n   * const datastore = new Datastore();\n   * const companyQuery = datastore.createQuery('Company');\n   *\n   * const cursorToken = 'X';\n   *\n   * // Retrieve results starting from cursorToken.\n   * const startQuery = companyQuery.start(cursorToken);\n   * ```\n   */\n  start(start) {\n    this.startVal = start;\n    return this;\n  }\n  /**\n   * Set an ending cursor to a query.\n   *\n   * @see {@link https://cloud.google.com/datastore/docs/concepts/queries#Datastore_Query_cursors| Query Cursors}\n   *\n   * @param {string} cursorToken The ending cursor token.\n   * @returns {Query}\n   *\n   * @example\n   * ```\n   * const {Datastore} = require('@google-cloud/datastore');\n   * const datastore = new Datastore();\n   * const companyQuery = datastore.createQuery('Company');\n   *\n   * const cursorToken = 'X';\n   *\n   * // Retrieve results limited to the extent of cursorToken.\n   * const endQuery = companyQuery.end(cursorToken);\n   * ```\n   */\n  end(end) {\n    this.endVal = end;\n    return this;\n  }\n  /**\n   * Set a limit on a query.\n   *\n   * @see {@link https://cloud.google.com/datastore/docs/concepts/queries#datastore-limit-nodejs| Query Limits}\n   *\n   * @param {number} n The number of results to limit the query to.\n   * @returns {Query}\n   *\n   * @example\n   * ```\n   * const {Datastore} = require('@google-cloud/datastore');\n   * const datastore = new Datastore();\n   * const companyQuery = datastore.createQuery('Company');\n   *\n   * // Limit the results to 10 entities.\n   * const limitQuery = companyQuery.limit(10);\n   * ```\n   */\n  limit(n) {\n    this.limitVal = n;\n    return this;\n  }\n  /**\n   * Set an offset on a query.\n   *\n   * @see {@link https://cloud.google.com/datastore/docs/concepts/queries#datastore-limit-nodejs| Query Offsets}\n   *\n   * @param {number} n The offset to start from after the start cursor.\n   * @returns {Query}\n   *\n   * @example\n   * ```\n   * const {Datastore} = require('@google-cloud/datastore');\n   * const datastore = new Datastore();\n   * const companyQuery = datastore.createQuery('Company');\n   *\n   * // Start from the 101st result.\n   * const offsetQuery = companyQuery.offset(100);\n   * ```\n   */\n  offset(n) {\n    this.offsetVal = n;\n    return this;\n  }\n  run(optionsOrCallback, cb) {\n    const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n    const callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : cb;\n    const runQuery = this.scope.runQuery.bind(this.scope);\n    return runQuery(this, options, callback);\n  }\n  /**\n   * Run the query as a readable object stream.\n   *\n   * @method Query#runStream\n   * @param {object} [options] Optional configuration. See\n   *     {@link Query#run} for a complete list of options.\n   * @returns {stream}\n   *\n   * @example\n   * ```\n   * const {Datastore} = require('@google-cloud/datastore');\n   * const datastore = new Datastore();\n   * const query = datastore.createQuery('Company');\n   *\n   * query.runStream()\n   *   .on('error', console.error)\n   *   .on('data', function (entity) {\n   *     // Access the Key object for this entity.\n   *     const key = entity[datastore.KEY];\n   *   })\n   *   .on('info', (info) => {})\n   *   .on('end', () => {\n   *     // All entities retrieved.\n   *   });\n   *\n   * //-\n   * // If you anticipate many results, you can end a stream early to prevent\n   * // unnecessary processing and API requests.\n   * //-\n   * query.runStream()\n   *   .on('data', function (entity) {\n   *     this.end();\n   *   });\n   * ```\n   */\n  runStream(options) {\n    return this.scope.runQueryStream(this, options);\n  }\n}\nexports.Query = Query;","map":{"version":3,"names":["arrify","require","filter_1","gaxInstance","Query","constructor","scope","namespaceOrKinds","kinds","namespace","filters","entityFilters","orders","groupByVal","selectVal","startVal","endVal","limitVal","offsetVal","filter","propertyOrFilter","operatorOrValue","value","arguments","length","warn","isFilter","push","name","trim","op","val","hasAncestor","key","order","property","options","sign","descending","groupBy","fieldNames","select","start","end","limit","n","offset","run","optionsOrCallback","cb","callback","runQuery","bind","runStream","runQueryStream","exports"],"sources":["../../src/query.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}