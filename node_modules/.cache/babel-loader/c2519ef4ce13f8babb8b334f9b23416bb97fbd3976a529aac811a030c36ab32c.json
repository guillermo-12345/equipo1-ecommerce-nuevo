{"ast":null,"code":"\"use strict\";\n\n/*!\n * Copyright 2014 Google LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DatastoreRequest = exports.TransactionState = exports.transactionExpiredError = void 0;\nexports.getTransactionRequest = getTransactionRequest;\nconst promisify_1 = require(\"@google-cloud/promisify\");\nconst arrify = require(\"arrify\");\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst concat = require('concat-stream');\nconst extend = require(\"extend\");\nconst split_array_stream_1 = require(\"split-array-stream\");\nconst stream_1 = require(\"stream\");\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst streamEvents = require('stream-events');\nexports.transactionExpiredError = 'This transaction has already expired.';\n// Import the clients for each version supported by this package.\nconst gapic = Object.freeze({\n  v1: require('./v1')\n});\nconst entity_1 = require(\"./entity\");\nconst query_1 = require(\"./query\");\nconst _1 = require(\".\");\nconst google_gax_1 = require(\"google-gax\");\nconst gax = require(\"google-gax\");\nconst root = gax.protobuf.loadSync('google/protobuf/struct.proto');\nconst Struct = root.lookupType('Struct');\n// This function decodes Struct proto values\nfunction decodeStruct(structValue) {\n  return google_gax_1.serializer.toProto3JSON(Struct.fromObject(structValue));\n}\n// This function gets a RunQueryInfo object that contains explain metrics that\n// were returned from the server.\nfunction getInfoFromStats(resp) {\n  // Decode struct values stored in planSummary and executionStats\n  const explainMetrics = {};\n  if (resp && resp.explainMetrics && resp.explainMetrics.planSummary && resp.explainMetrics.planSummary.indexesUsed) {\n    Object.assign(explainMetrics, {\n      planSummary: {\n        indexesUsed: resp.explainMetrics.planSummary.indexesUsed.map(index => decodeStruct(index))\n      }\n    });\n  }\n  if (resp && resp.explainMetrics && resp.explainMetrics.executionStats) {\n    const executionStats = {};\n    {\n      const resultsReturned = resp.explainMetrics.executionStats.resultsReturned;\n      if (resultsReturned) {\n        Object.assign(executionStats, {\n          resultsReturned: typeof resultsReturned === 'string' ? parseInt(resultsReturned) : resultsReturned\n        });\n      }\n    }\n    {\n      const executionDuration = resp.explainMetrics.executionStats.executionDuration;\n      if (executionDuration) {\n        Object.assign(executionStats, {\n          executionDuration: typeof executionDuration === 'string' ? parseInt(executionDuration) : executionDuration\n        });\n      }\n    }\n    {\n      const readOperations = resp.explainMetrics.executionStats.readOperations;\n      if (readOperations) {\n        Object.assign(executionStats, {\n          readOperations: typeof readOperations === 'string' ? parseInt(readOperations) : readOperations\n        });\n      }\n    }\n    {\n      const debugStats = resp.explainMetrics.executionStats.debugStats;\n      if (debugStats) {\n        Object.assign(executionStats, {\n          debugStats: decodeStruct(debugStats)\n        });\n      }\n    }\n    Object.assign(explainMetrics, {\n      executionStats\n    });\n  }\n  if (explainMetrics.planSummary || explainMetrics.executionStats) {\n    return {\n      explainMetrics\n    };\n  }\n  return {};\n}\nconst readTimeAndConsistencyError = 'Read time and read consistency cannot both be specified.';\n// Write function to check for readTime and readConsistency.\nfunction throwOnReadTimeAndConsistency(options) {\n  if (options.readTime && options.consistency) {\n    throw new Error(readTimeAndConsistencyError);\n  }\n}\n/**\n * A map of read consistency values to proto codes.\n *\n * @type {object}\n * @private\n */\nconst CONSISTENCY_PROTO_CODE = {\n  eventual: 2,\n  strong: 1\n};\n/**\n * By default a DatastoreRequest is in the NOT_TRANSACTION state. If the\n * DatastoreRequest is a Transaction object, then initially it will be in\n * the NOT_STARTED state, but then the state will become IN_PROGRESS after the\n * transaction has started.\n */\nvar TransactionState;\n(function (TransactionState) {\n  TransactionState[TransactionState[\"NOT_TRANSACTION\"] = 0] = \"NOT_TRANSACTION\";\n  TransactionState[TransactionState[\"NOT_STARTED\"] = 1] = \"NOT_STARTED\";\n  TransactionState[TransactionState[\"IN_PROGRESS\"] = 2] = \"IN_PROGRESS\";\n  TransactionState[TransactionState[\"EXPIRED\"] = 3] = \"EXPIRED\";\n})(TransactionState || (exports.TransactionState = TransactionState = {}));\n/**\n * Handle logic for Datastore API operations. Handles request logic for\n * Datastore.\n *\n * Creates requests to the Datastore endpoint. Designed to be inherited by\n * the {@link Datastore} and {@link Transaction} classes.\n *\n * @class\n */\nclass DatastoreRequest {\n  constructor() {\n    this.state = TransactionState.NOT_TRANSACTION;\n  }\n  /**\n   * Format a user's input to mutation methods. This will create a deep clone of\n   * the input, as well as allow users to pass an object in the format of an\n   * entity.\n   *\n   * Both of the following formats can be supplied supported:\n   *\n   *     datastore.save({\n   *       key: datastore.key('Kind'),\n   *       data: { foo: 'bar' }\n   *     }, (err) => {})\n   *\n   *     const entity = { foo: 'bar' }\n   *     entity[datastore.KEY] = datastore.key('Kind')\n   *     datastore.save(entity, (err) => {})\n   *\n   * @internal\n   *\n   * @see {@link https://github.com/GoogleCloudPlatform/google-cloud-node/issues/1803}\n   *\n   * @param {object} obj The user's input object.\n   */\n  static prepareEntityObject_(obj) {\n    const entityObject = extend(true, {}, obj);\n    // Entity objects are also supported.\n    if (obj[entity_1.entity.KEY_SYMBOL]) {\n      return {\n        key: obj[entity_1.entity.KEY_SYMBOL],\n        data: entityObject\n      };\n    }\n    return entityObject;\n  }\n  allocateIds(key, options, callback) {\n    if (entity_1.entity.isKeyComplete(key)) {\n      throw new Error('An incomplete key should be provided.');\n    }\n    options = typeof options === 'number' ? {\n      allocations: options\n    } : options;\n    this.request_({\n      client: 'DatastoreClient',\n      method: 'allocateIds',\n      reqOpts: {\n        keys: new Array(options.allocations).fill(entity_1.entity.keyToKeyProto(key))\n      },\n      gaxOpts: options.gaxOptions\n    }, (err, resp) => {\n      if (err) {\n        callback(err, null, resp);\n        return;\n      }\n      const keys = arrify(resp.keys).map(entity_1.entity.keyFromKeyProto);\n      callback(null, keys, resp);\n    });\n  }\n  /* This throws an error if the transaction has already expired.\n   *\n   */\n  checkExpired() {\n    if (this.state === TransactionState.EXPIRED) {\n      throw Error(exports.transactionExpiredError);\n    }\n  }\n  /**\n   * Retrieve the entities as a readable object stream.\n   *\n   * @throws {Error} If at least one Key object is not provided.\n   * @throws {Error} If read time and read consistency cannot both be specified.\n   *\n   * @param {Key|Key[]} keys Datastore key object(s).\n   * @param {object} [options] Optional configuration. See {@link Datastore#get}\n   *     for a complete list of options.\n   *\n   * @example\n   * ```\n   * const keys = [\n   *   datastore.key(['Company', 123]),\n   *   datastore.key(['Product', 'Computer'])\n   * ];\n   *\n   * datastore.createReadStream(keys)\n   *   .on('error', (err) =>  {})\n   *   .on('data', (entity) => {\n   *     // entity is an entity object.\n   *   })\n   *   .on('end', () => {\n   *     // All entities retrieved.\n   *   });\n   * ```\n   */\n  createReadStream(keys, options = {}) {\n    keys = arrify(keys).map(entity_1.entity.keyToKeyProto);\n    if (keys.length === 0) {\n      throw new Error('At least one Key object is required.');\n    }\n    this.checkExpired();\n    throwOnReadTimeAndConsistency(options);\n    const reqOpts = this.getRequestOptions(options);\n    throwOnTransactionErrors(this, reqOpts);\n    const makeRequest = keys => {\n      Object.assign(reqOpts, {\n        keys\n      });\n      this.request_({\n        client: 'DatastoreClient',\n        method: 'lookup',\n        reqOpts,\n        gaxOpts: options.gaxOptions\n      }, (err, resp) => {\n        this.parseTransactionResponse(resp);\n        if (err) {\n          stream.destroy(err);\n          return;\n        }\n        let entities = [];\n        try {\n          entities = entity_1.entity.formatArray(resp.found, options.wrapNumbers);\n        } catch (err) {\n          stream.destroy(err);\n          return;\n        }\n        const nextKeys = (resp.deferred || []).map(entity_1.entity.keyFromKeyProto).map(entity_1.entity.keyToKeyProto);\n        (0, split_array_stream_1.split)(entities, stream).then(streamEnded => {\n          if (streamEnded) {\n            return;\n          }\n          if (nextKeys.length > 0) {\n            makeRequest(nextKeys);\n            return;\n          }\n          stream.push(null);\n        });\n      });\n    };\n    const stream = streamEvents(new stream_1.Transform({\n      objectMode: true\n    }));\n    stream.once('reading', () => {\n      makeRequest(keys);\n    });\n    return stream;\n  }\n  delete(keys, gaxOptionsOrCallback, cb) {\n    const gaxOptions = typeof gaxOptionsOrCallback === 'object' ? gaxOptionsOrCallback : {};\n    const callback = typeof gaxOptionsOrCallback === 'function' ? gaxOptionsOrCallback : cb;\n    const reqOpts = {\n      mutations: arrify(keys).map(key => {\n        return {\n          delete: entity_1.entity.keyToKeyProto(key)\n        };\n      })\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    };\n    if (this.id) {\n      this.requests_.push(reqOpts);\n      return;\n    }\n    this.request_({\n      client: 'DatastoreClient',\n      method: 'commit',\n      reqOpts,\n      gaxOpts: gaxOptions\n    }, callback);\n  }\n  get(keys, optionsOrCallback, cb) {\n    const options = typeof optionsOrCallback === 'object' && optionsOrCallback ? optionsOrCallback : {};\n    const callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : cb;\n    try {\n      this.createReadStream(keys, options).on('error', callback).pipe(concat(results => {\n        const isSingleLookup = !Array.isArray(keys);\n        callback(null, isSingleLookup ? results[0] : results);\n      }));\n    } catch (err) {\n      callback(err);\n    }\n  }\n  /**\n   * This function saves results from a successful beginTransaction call.\n   *\n   * @param {BeginAsyncResponse} [response] The response from a call to\n   * begin a transaction that completed successfully.\n   *\n   **/\n  parseTransactionResponse(resp) {\n    if (resp && resp.transaction && Buffer.byteLength(resp.transaction) > 0) {\n      this.id = resp.transaction;\n      this.state = TransactionState.IN_PROGRESS;\n    }\n  }\n  runAggregationQuery(query, optionsOrCallback, cb) {\n    const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n    const callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : cb;\n    if (this.state === TransactionState.EXPIRED) {\n      callback(new Error(exports.transactionExpiredError));\n      return;\n    }\n    if (options.readTime && options.consistency) {\n      callback(new Error(readTimeAndConsistencyError));\n      return;\n    }\n    query.query = extend(true, new query_1.Query(), query.query);\n    let queryProto;\n    try {\n      queryProto = entity_1.entity.queryToQueryProto(query.query);\n    } catch (e) {\n      // using setImmediate here to make sure this doesn't throw a\n      // synchronous error\n      setImmediate(callback, e);\n      return;\n    }\n    let sharedQueryOpts;\n    try {\n      sharedQueryOpts = this.getQueryOptions(query.query, options);\n      throwOnTransactionErrors(this, sharedQueryOpts);\n    } catch (error) {\n      callback(error);\n      return;\n    }\n    const aggregationQueryOptions = {\n      nestedQuery: queryProto,\n      aggregations: query.toProto()\n    };\n    const reqOpts = Object.assign(sharedQueryOpts, {\n      aggregationQuery: aggregationQueryOptions\n    });\n    this.request_({\n      client: 'DatastoreClient',\n      method: 'runAggregationQuery',\n      reqOpts,\n      gaxOpts: options.gaxOptions\n    }, (err, res) => {\n      const info = getInfoFromStats(res);\n      this.parseTransactionResponse(res);\n      if (res && res.batch) {\n        const results = res.batch.aggregationResults;\n        const finalResults = results.map(aggregationResult => aggregationResult.aggregateProperties).map(aggregateProperties => Object.fromEntries(new Map(Object.keys(aggregateProperties).map(key => [key, entity_1.entity.decodeValueProto(aggregateProperties[key])]))));\n        callback(err, finalResults, info);\n      } else {\n        callback(err, [], info);\n      }\n    });\n  }\n  runQuery(query, optionsOrCallback, cb) {\n    const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n    const callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : cb;\n    let info;\n    try {\n      this.runQueryStream(query, options).on('error', callback).on('info', info_ => {\n        info = info_;\n      }).pipe(concat(results => {\n        callback(null, results, info);\n      }));\n    } catch (err) {\n      callback(err);\n    }\n  }\n  /**\n   * Get a list of entities as a readable object stream.\n   *\n   * See {@link Datastore#runQuery} for a list of all available options.\n   *\n   * @param {Query} query Query object.\n   * @param {object} [options] Optional configuration.\n   * @param {object} [options.gaxOptions] Request configuration options, outlined\n   *     here: https://googleapis.github.io/gax-nodejs/global.html#CallOptions.\n   *\n   * @throws {Error} If read time and read consistency cannot both be specified.\n   *\n   * @example\n   * ```\n   * datastore.runQueryStream(query)\n   *   .on('error', console.error)\n   *   .on('data', (entity) => {\n   *     // Access the Key object for this entity.\n   *     const key = entity[datastore.KEY];\n   *   })\n   *   .on('info', (info) => {})\n   *   .on('end', () => {\n   *     // All entities retrieved.\n   *   });\n   *\n   * //-\n   * // If you anticipate many results, you can end a stream early to prevent\n   * // unnecessary processing and API requests.\n   * //-\n   * datastore.runQueryStream(query)\n   *   .on('data', (entity) => {\n   *     this.end();\n   *   });\n   * ```\n   */\n  runQueryStream(query, options = {}) {\n    this.checkExpired();\n    throwOnReadTimeAndConsistency(options);\n    query = extend(true, new query_1.Query(), query);\n    const sharedQueryOpts = this.getQueryOptions(query, options);\n    throwOnTransactionErrors(this, sharedQueryOpts);\n    const makeRequest = query => {\n      let queryProto;\n      try {\n        queryProto = entity_1.entity.queryToQueryProto(query);\n      } catch (e) {\n        // using setImmediate here to make sure this doesn't throw a\n        // synchronous error\n        setImmediate(onResultSet, e);\n        return;\n      }\n      const reqOpts = sharedQueryOpts;\n      reqOpts.query = queryProto;\n      this.request_({\n        client: 'DatastoreClient',\n        method: 'runQuery',\n        reqOpts,\n        gaxOpts: options.gaxOptions\n      }, onResultSet);\n    };\n    const onResultSet = (err, resp) => {\n      this.parseTransactionResponse(resp);\n      if (err) {\n        stream.destroy(err);\n        return;\n      }\n      if (!resp.batch) {\n        // If there are no results then send any stats back and end the stream.\n        stream.emit('info', getInfoFromStats(resp));\n        stream.push(null);\n        return;\n      }\n      const info = Object.assign(getInfoFromStats(resp), {\n        moreResults: resp.batch.moreResults\n      });\n      if (resp.batch.endCursor) {\n        info.endCursor = resp.batch.endCursor.toString('base64');\n      }\n      let entities = [];\n      if (resp.batch.entityResults) {\n        try {\n          entities = entity_1.entity.formatArray(resp.batch.entityResults, options.wrapNumbers);\n        } catch (err) {\n          stream.destroy(err);\n          return;\n        }\n      }\n      // Emit each result right away, then get the rest if necessary.\n      (0, split_array_stream_1.split)(entities, stream).then(streamEnded => {\n        if (streamEnded) {\n          return;\n        }\n        if (resp.batch.moreResults !== 'NOT_FINISHED') {\n          stream.emit('info', info);\n          stream.push(null);\n          return;\n        }\n        // The query is \"NOT_FINISHED\". Get the rest of the results.\n        const offset = query.offsetVal === -1 ? 0 : query.offsetVal;\n        query.start(info.endCursor).offset(offset - resp.batch.skippedResults);\n        const limit = query.limitVal;\n        if (limit && limit > -1) {\n          query.limit(limit - resp.batch.entityResults.length);\n        }\n        makeRequest(query);\n      });\n    };\n    const stream = streamEvents(new stream_1.Transform({\n      objectMode: true\n    }));\n    stream.once('reading', () => {\n      makeRequest(query);\n    });\n    return stream;\n  }\n  getRequestOptions(options) {\n    const sharedQueryOpts = {};\n    if (isTransaction(this)) {\n      if (this.state === TransactionState.NOT_STARTED) {\n        if (sharedQueryOpts.readOptions === undefined) {\n          sharedQueryOpts.readOptions = {};\n        }\n        sharedQueryOpts.readOptions.newTransaction = getTransactionRequest(this, {});\n        sharedQueryOpts.readOptions.consistencyType = 'newTransaction';\n      }\n    }\n    if (options.consistency) {\n      const code = CONSISTENCY_PROTO_CODE[options.consistency.toLowerCase()];\n      if (sharedQueryOpts.readOptions === undefined) {\n        sharedQueryOpts.readOptions = {};\n      }\n      sharedQueryOpts.readOptions.readConsistency = code;\n    }\n    if (options.readTime) {\n      if (sharedQueryOpts.readOptions === undefined) {\n        sharedQueryOpts.readOptions = {};\n      }\n      const readTime = options.readTime;\n      const seconds = readTime / 1000;\n      sharedQueryOpts.readOptions.readTime = {\n        seconds: Math.floor(seconds)\n      };\n    }\n    return sharedQueryOpts;\n  }\n  getQueryOptions(query, options = {}) {\n    const sharedQueryOpts = this.getRequestOptions(options);\n    if (options.explainOptions) {\n      sharedQueryOpts.explainOptions = options.explainOptions;\n    }\n    if (query.namespace) {\n      sharedQueryOpts.partitionId = {\n        namespaceId: query.namespace\n      };\n    }\n    return sharedQueryOpts;\n  }\n  merge(entities, callback) {\n    const transaction = this.datastore.transaction();\n    transaction.run(async err => {\n      if (err) {\n        try {\n          await transaction.rollback();\n        } catch (error) {\n          // Provide the error & API response from the failed run to the user.\n          // Even a failed rollback should be transparent.\n          // RE: https://github.com/GoogleCloudPlatform/gcloud-node/pull/1369#discussion_r66833976\n        }\n        callback(err);\n        return;\n      }\n      try {\n        await Promise.all(arrify(entities).map(async objEntity => {\n          const obj = DatastoreRequest.prepareEntityObject_(objEntity);\n          const [data] = await transaction.get(obj.key);\n          obj.method = 'upsert';\n          obj.data = Object.assign({}, data, obj.data);\n          transaction.save(obj);\n        }));\n        const [response] = await transaction.commit();\n        callback(null, response);\n      } catch (err) {\n        try {\n          await transaction.rollback();\n        } catch (error) {\n          // Provide the error & API response from the failed commit to the user.\n          // Even a failed rollback should be transparent.\n          // RE: https://github.com/GoogleCloudPlatform/gcloud-node/pull/1369#discussion_r66833976\n        }\n        callback(err);\n      }\n    });\n  }\n  /**\n   * @private\n   */\n  prepareGaxRequest_(config, callback) {\n    const datastore = this.datastore;\n    const isTransaction = this.id ? true : false;\n    const method = config.method;\n    const reqOpts = extend(true, {}, config.reqOpts);\n    // Set properties to indicate if we're in a transaction or not.\n    if (method === 'commit') {\n      if (isTransaction) {\n        reqOpts.mode = 'TRANSACTIONAL';\n        reqOpts.transaction = this.id;\n      } else {\n        reqOpts.mode = 'NON_TRANSACTIONAL';\n      }\n    }\n    if (datastore.options && datastore.options.databaseId) {\n      reqOpts.databaseId = datastore.options.databaseId;\n    }\n    if (method === 'rollback') {\n      reqOpts.transaction = this.id;\n    }\n    throwOnTransactionErrors(this, reqOpts);\n    if (isTransaction && (method === 'lookup' || method === 'runQuery' || method === 'runAggregationQuery')) {\n      if (reqOpts.readOptions) {\n        Object.assign(reqOpts.readOptions, {\n          transaction: this.id\n        });\n      } else {\n        reqOpts.readOptions = {\n          transaction: this.id\n        };\n      }\n    }\n    datastore.auth.getProjectId((err, projectId) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n      const clientName = config.client;\n      if (!datastore.clients_.has(clientName)) {\n        datastore.clients_.set(clientName, new gapic.v1[clientName](datastore.options));\n      }\n      const gaxClient = datastore.clients_.get(clientName);\n      reqOpts.projectId = projectId;\n      const gaxOpts = extend(true, {}, config.gaxOpts, {\n        headers: {\n          'google-cloud-resource-prefix': `projects/${projectId}`\n        }\n      });\n      const requestFn = gaxClient[method].bind(gaxClient, reqOpts, gaxOpts);\n      callback(null, requestFn);\n    });\n  }\n  request_(config, callback) {\n    this.prepareGaxRequest_(config, (err, requestFn) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n      requestFn(callback);\n    });\n  }\n  /**\n   * Make a request as a stream.\n   *\n   * @param {object} config Configuration object.\n   * @param {object} config.gaxOpts GAX options.\n   * @param {string} config.client The name of the gax client.\n   * @param {string} config.method The gax method to call.\n   * @param {object} config.reqOpts Request options.\n   */\n  requestStream_(config) {\n    let gaxStream;\n    const stream = streamEvents(new stream_1.PassThrough({\n      objectMode: true\n    }));\n    stream.abort = () => {\n      if (gaxStream && gaxStream.cancel) {\n        gaxStream.cancel();\n      }\n    };\n    stream.once('reading', () => {\n      this.prepareGaxRequest_(config, (err, requestFn) => {\n        if (err) {\n          stream.destroy(err);\n          return;\n        }\n        gaxStream = requestFn();\n        gaxStream.on('error', stream.destroy.bind(stream)).on('response', stream.emit.bind(stream, 'response')).pipe(stream);\n      });\n    });\n    return stream;\n  }\n}\nexports.DatastoreRequest = DatastoreRequest;\nfunction isTransaction(request) {\n  return request instanceof _1.Transaction;\n}\nfunction throwOnTransactionErrors(request, options) {\n  const isTransaction = request.id ? true : false;\n  if (isTransaction || options.readOptions && options.readOptions.newTransaction) {\n    if (options.readOptions && options.readOptions.readConsistency) {\n      throw new Error('Read consistency cannot be specified in a transaction.');\n    }\n    if (options.readOptions && options.readOptions.readTime) {\n      throw new Error('Read time cannot be specified in a transaction.');\n    }\n  }\n}\n/**\n * This function gets transaction request options used for defining a\n * request to create a new transaction on the server.\n *\n * @param transaction The transaction for which the request will be made.\n * @param options Custom options that will be used to create the request.\n */\nfunction getTransactionRequest(transaction, options) {\n  // If transactionOptions are provide then they will be used.\n  // Otherwise, options passed into this function are used and when absent\n  // options that exist on Transaction are used.\n  return options.transactionOptions // If transactionOptions is specified:\n  ? options.transactionOptions.readOnly // Use readOnly on transactionOptions\n  ? {\n    readOnly: {}\n  } : options.transactionOptions.id // Use retry transaction if specified:\n  ? {\n    readWrite: {\n      previousTransaction: options.transactionOptions.id\n    }\n  } : {} : options.readOnly || transaction.readOnly // If transactionOptions not set:\n  ? {\n    readOnly: {}\n  } // Create a readOnly transaction if readOnly option set\n  : options.transactionId || transaction.id ? {\n    // Create readWrite transaction with a retry transaction set\n    readWrite: {\n      previousTransaction: options.transactionId || transaction.id\n    }\n  } : {}; // Request will be readWrite with no retry transaction set;\n}\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\n(0, promisify_1.promisifyAll)(DatastoreRequest, {\n  exclude: ['checkExpired', 'getQueryOptions', 'getRequestOptions']\n});","map":{"version":3,"names":["exports","getTransactionRequest","promisify_1","require","arrify","concat","extend","split_array_stream_1","stream_1","streamEvents","transactionExpiredError","gapic","Object","freeze","v1","entity_1","query_1","_1","google_gax_1","gax","root","protobuf","loadSync","Struct","lookupType","decodeStruct","structValue","serializer","toProto3JSON","fromObject","getInfoFromStats","resp","explainMetrics","planSummary","indexesUsed","assign","map","index","executionStats","resultsReturned","parseInt","executionDuration","readOperations","debugStats","readTimeAndConsistencyError","throwOnReadTimeAndConsistency","options","readTime","consistency","Error","CONSISTENCY_PROTO_CODE","eventual","strong","TransactionState","DatastoreRequest","constructor","state","NOT_TRANSACTION","prepareEntityObject_","obj","entityObject","entity","KEY_SYMBOL","key","data","allocateIds","callback","isKeyComplete","allocations","request_","client","method","reqOpts","keys","Array","fill","keyToKeyProto","gaxOpts","gaxOptions","err","keyFromKeyProto","checkExpired","EXPIRED","createReadStream","length","getRequestOptions","throwOnTransactionErrors","makeRequest","parseTransactionResponse","stream","destroy","entities","formatArray","found","wrapNumbers","nextKeys","deferred","split","then","streamEnded","push","Transform","objectMode","once","delete","gaxOptionsOrCallback","cb","mutations","id","requests_","get","optionsOrCallback","on","pipe","results","isSingleLookup","isArray","transaction","Buffer","byteLength","IN_PROGRESS","runAggregationQuery","query","Query","queryProto","queryToQueryProto","e","setImmediate","sharedQueryOpts","getQueryOptions","error","aggregationQueryOptions","nestedQuery","aggregations","toProto","aggregationQuery","res","info","batch","aggregationResults","finalResults","aggregationResult","aggregateProperties","fromEntries","Map","decodeValueProto","runQuery","runQueryStream","info_","onResultSet","emit","moreResults","endCursor","toString","entityResults","offset","offsetVal","start","skippedResults","limit","limitVal","isTransaction","NOT_STARTED","readOptions","undefined","newTransaction","consistencyType","code","toLowerCase","readConsistency","seconds","Math","floor","explainOptions","namespace","partitionId","namespaceId","merge","datastore","run","rollback","Promise","all","objEntity","save","response","commit","prepareGaxRequest_","config","mode","databaseId","auth","getProjectId","projectId","clientName","clients_","has","set","gaxClient","headers","requestFn","bind","requestStream_","gaxStream","PassThrough","abort","cancel","request","Transaction","transactionOptions","readOnly","readWrite","previousTransaction","transactionId","promisifyAll","exclude"],"sources":["../../src/request.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}