{"ast":null,"code":"\"use strict\";\n\n// Copyright 2023 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AGGREGATE_QUERY = exports.AggregateQuery = exports.AggregateField = void 0;\nconst AGGREGATE_QUERY = Symbol('AGGREGATE_QUERY');\nexports.AGGREGATE_QUERY = AGGREGATE_QUERY;\n/**\n * An AggregateQuery is a class that can be used to obtain results from an\n * aggregate query request.\n *\n * @see {@link https://cloud.google.com/datastore/docs/aggregation-queries| Aggregation queries Reference}\n *\n * @class\n */\nclass AggregateQuery {\n  /**\n   * Build an AggregateQuery object.\n   *\n   * @param {Query} query\n   */\n  constructor(query) {\n    this.type = AGGREGATE_QUERY;\n    this.query = query;\n    this.aggregations = [];\n  }\n  /**\n   * Add a `count` aggregate query to the list of aggregations.\n   *\n   * @param {string} alias\n   * @returns {AggregateQuery}\n   */\n  count(alias) {\n    this.aggregations.push(AggregateField.count().alias(alias));\n    return this;\n  }\n  /**\n   * Add a `sum` aggregate query to the list of aggregations.\n   *\n   * @param {string} property\n   * @param {string} alias\n   * @returns {AggregateQuery}\n   */\n  sum(property, alias) {\n    this.aggregations.push(AggregateField.sum(property).alias(alias));\n    return this;\n  }\n  /**\n   * Add a `average` aggregate query to the list of aggregations.\n   *\n   * @param {string} property\n   * @param {string} alias\n   * @returns {AggregateQuery}\n   */\n  average(property, alias) {\n    this.aggregations.push(AggregateField.average(property).alias(alias));\n    return this;\n  }\n  /**\n   * Add a custom aggregation to the list of aggregations.\n   *\n   * @param {AggregateField} aggregation\n   * @returns {AggregateQuery}\n   */\n  addAggregation(aggregation) {\n    this.aggregations.push(aggregation);\n    return this;\n  }\n  /**\n   * Add a list of custom aggregations to the list of aggregations.\n   *\n   * @param {AggregateField[]} aggregation\n   * @returns {AggregateQuery}\n   */\n  addAggregations(aggregations) {\n    for (const aggregation of aggregations) {\n      this.aggregations.push(aggregation);\n    }\n    return this;\n  }\n  /**\n   * Run the aggregation query and return the results.\n   *\n   * @param {RunQueryOptions | RequestCallback} [optionsOrCallback]\n   * @param {function} cb The callback function.\n   * @returns {void | Promise<RunQueryResponse>}\n   */\n  run(optionsOrCallback, cb) {\n    const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n    const callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : cb;\n    const scope = this.query.scope;\n    const runAggregationQuery = scope.runAggregationQuery.bind(scope);\n    return runAggregationQuery(this, options, callback);\n  }\n  /**\n   * Get the proto for the list of aggregations.\n   *\n   */\n  toProto() {\n    return this.aggregations.map(aggregation => aggregation.toProto());\n  }\n}\nexports.AggregateQuery = AggregateQuery;\n/**\n * An AggregateField is a class that contains data that defines an aggregation.\n *\n */\nclass AggregateField {\n  /**\n   * Gets a copy of the Count aggregate field.\n   *\n   * @returns {Count}\n   */\n  static count() {\n    return new Count();\n  }\n  /**\n   * Gets a copy of the Sum aggregate field.\n   *\n   * @returns {Sum}\n   */\n  static sum(property) {\n    return new Sum(property);\n  }\n  /**\n   * Gets a copy of the Average aggregate field.\n   *\n   * @returns {Average}\n   */\n  static average(property) {\n    return new Average(property);\n  }\n  /**\n   * Sets the alias on the aggregate field that should be used.\n   *\n   * @param {string} alias The label used in the results to describe this\n   * aggregate field when a query is run.\n   * @returns {AggregateField}\n   */\n  alias(alias) {\n    if (alias) {\n      this.alias_ = alias;\n    }\n    return this;\n  }\n}\nexports.AggregateField = AggregateField;\n/**\n * A Count is a class that contains data that defines a Count aggregation.\n *\n */\nclass Count extends AggregateField {\n  /**\n   * Gets the proto for the count aggregate field.\n   *\n   */\n  toProto() {\n    const count = Object.assign({});\n    return Object.assign({\n      count\n    }, this.alias_ ? {\n      alias: this.alias_\n    } : null);\n  }\n}\n/**\n * A PropertyAggregateField is a class that contains data that defines any\n * aggregation that is performed on a property.\n *\n */\nclass PropertyAggregateField extends AggregateField {\n  /**\n   * Build a PropertyAggregateField object.\n   *\n   * @param {string} property\n   */\n  constructor(property_) {\n    super();\n    this.property_ = property_;\n  }\n  /**\n   * Gets the proto for the property aggregate field.\n   *\n   */\n  toProto() {\n    const aggregation = this.property_ ? {\n      property: {\n        name: this.property_\n      }\n    } : {};\n    return Object.assign({\n      operator: this.operator\n    }, this.alias_ ? {\n      alias: this.alias_\n    } : null, {\n      [this.operator]: aggregation\n    });\n  }\n}\n/**\n * A Sum is a class that contains data that defines a Sum aggregation.\n *\n */\nclass Sum extends PropertyAggregateField {\n  constructor() {\n    super(...arguments);\n    this.operator = 'sum';\n  }\n}\n/**\n * An Average is a class that contains data that defines an Average aggregation.\n *\n */\nclass Average extends PropertyAggregateField {\n  constructor() {\n    super(...arguments);\n    this.operator = 'avg';\n  }\n}","map":{"version":3,"names":["AGGREGATE_QUERY","Symbol","exports","AggregateQuery","constructor","query","type","aggregations","count","alias","push","AggregateField","sum","property","average","addAggregation","aggregation","addAggregations","run","optionsOrCallback","cb","options","callback","scope","runAggregationQuery","bind","toProto","map","Count","Sum","Average","alias_","Object","assign","PropertyAggregateField","property_","name","operator"],"sources":["../../src/aggregate.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}