{"ast":null,"code":"\"use strict\";\n\n// Copyright 2023 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PropertyFilter = exports.EntityFilter = void 0;\nexports.and = and;\nexports.or = or;\nexports.isFilter = isFilter;\nconst entity_1 = require(\"./entity\");\nconst OP_TO_OPERATOR = new Map([['=', 'EQUAL'], ['>', 'GREATER_THAN'], ['>=', 'GREATER_THAN_OR_EQUAL'], ['<', 'LESS_THAN'], ['<=', 'LESS_THAN_OR_EQUAL'], ['HAS_ANCESTOR', 'HAS_ANCESTOR'], ['!=', 'NOT_EQUAL'], ['IN', 'IN'], ['NOT_IN', 'NOT_IN']]);\nvar CompositeOperator;\n(function (CompositeOperator) {\n  CompositeOperator[\"AND\"] = \"AND\";\n  CompositeOperator[\"OR\"] = \"OR\";\n})(CompositeOperator || (CompositeOperator = {}));\n/**\n * Returns an AND composite filter.\n *\n * @param {EntityFilter[]} filters The filters that make up the AND filter.\n */\nfunction and(filters) {\n  return new CompositeFilter(filters, CompositeOperator.AND);\n}\n/**\n * Returns an OR composite filter.\n *\n * @param {EntityFilter[]} filters The filters that make up the OR filter.\n */\nfunction or(filters) {\n  return new CompositeFilter(filters, CompositeOperator.OR);\n}\n/**\n * A Filter is a class that contains data for a filter that can be translated\n * into a proto when needed.\n *\n * @see {@link https://cloud.google.com/datastore/docs/concepts/queries#filters| Filters Reference}\n *\n */\nclass EntityFilter {}\nexports.EntityFilter = EntityFilter;\n/**\n * A PropertyFilter is a filter that gets applied to a query directly.\n *\n * @see {@link https://cloud.google.com/datastore/docs/concepts/queries#property_filters| Property filters Reference}\n *\n * @class\n */\nclass PropertyFilter extends EntityFilter {\n  /**\n   * Build a Property Filter object.\n   *\n   * @param {string} Property The property name that the filter will be applied to.\n   * @param {Operator} operator The comparison operator that the filter applies.\n   * @param {any} val The value that the filter compares the property to.\n   */\n  constructor(name, op, val) {\n    super();\n    this.name = name;\n    this.op = op;\n    this.val = val;\n  }\n  /**\n   * Gets the proto for the filter.\n   *\n   */\n  // eslint-disable-next-line\n  toProto() {\n    return {\n      propertyFilter: {\n        property: {\n          name: this.name\n        },\n        op: OP_TO_OPERATOR.get(this.op),\n        value: entity_1.entity.encodeValue(this.val, this.name)\n      }\n    };\n  }\n}\nexports.PropertyFilter = PropertyFilter;\n/**\n * A CompositeFilter is a filter that combines other filters and applies that\n * combination to a query.\n *\n * @see {@link https://cloud.google.com/datastore/docs/concepts/queries#composite_filters| Composite filters Reference}\n *\n * @class\n */\nclass CompositeFilter extends EntityFilter {\n  /**\n   * Build a Composite Filter object.\n   *\n   * @param {EntityFilter[]} filters The filters that make up the composite filter.\n   */\n  constructor(filters, op) {\n    super();\n    this.filters = filters;\n    this.op = op;\n  }\n  /**\n   * Gets the proto for the filter.\n   *\n   */\n  // eslint-disable-next-line\n  toProto() {\n    return {\n      compositeFilter: {\n        filters: this.filters.map(filter => filter.toProto()),\n        op: this.op\n      }\n    };\n  }\n}\nfunction isFilter(filter) {\n  return filter instanceof EntityFilter;\n}","map":{"version":3,"names":["exports","and","or","isFilter","entity_1","require","OP_TO_OPERATOR","Map","CompositeOperator","filters","CompositeFilter","AND","OR","EntityFilter","PropertyFilter","constructor","name","op","val","toProto","propertyFilter","property","get","value","entity","encodeValue","compositeFilter","map","filter"],"sources":["../../src/filter.ts"],"sourcesContent":[null],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AA4BAA,OAAA,CAAAC,GAAA,GAAAA,GAAA;AASAD,OAAA,CAAAE,EAAA,GAAAA,EAAA;AA0GAF,OAAA,CAAAG,QAAA,GAAAA,QAAA;AA5IA,MAAAC,QAAA,GAAAC,OAAA;AAGA,MAAMC,cAAc,GAAG,IAAIC,GAAG,CAAC,CAC7B,CAAC,GAAG,EAAE,OAAO,CAAC,EACd,CAAC,GAAG,EAAE,cAAc,CAAC,EACrB,CAAC,IAAI,EAAE,uBAAuB,CAAC,EAC/B,CAAC,GAAG,EAAE,WAAW,CAAC,EAClB,CAAC,IAAI,EAAE,oBAAoB,CAAC,EAC5B,CAAC,cAAc,EAAE,cAAc,CAAC,EAChC,CAAC,IAAI,EAAE,WAAW,CAAC,EACnB,CAAC,IAAI,EAAE,IAAI,CAAC,EACZ,CAAC,QAAQ,EAAE,QAAQ,CAAC,CACrB,CAAC;AAEF,IAAKC,iBAGJ;AAHD,WAAKA,iBAAiB;EACpBA,iBAAA,eAAW;EACXA,iBAAA,aAAS;AACX,CAAC,EAHIA,iBAAiB,KAAjBA,iBAAiB;AAKtB;;;;;AAKA,SAAgBP,GAAGA,CAACQ,OAAuB;EACzC,OAAO,IAAIC,eAAe,CAACD,OAAO,EAAED,iBAAiB,CAACG,GAAG,CAAC;AAC5D;AAEA;;;;;AAKA,SAAgBT,EAAEA,CAACO,OAAuB;EACxC,OAAO,IAAIC,eAAe,CAACD,OAAO,EAAED,iBAAiB,CAACI,EAAE,CAAC;AAC3D;AAEA;;;;;;;AAOA,MAAsBC,YAAY;AAAlCb,OAAA,CAAAa,YAAA,GAAAA,YAAA;AAaA;;;;;;;AAOA,MAAaC,cACX,SAAQD,YAAY;EAGpB;;;;;;;EAOAE,YACSC,IAAO,EACPC,EAAY,EACZC,GAA8B;IAErC,KAAK,EAAE;IAJA,KAAAF,IAAI,GAAJA,IAAI;IACJ,KAAAC,EAAE,GAAFA,EAAE;IACF,KAAAC,GAAG,GAAHA,GAAG;EAGZ;EAEA;;;;EAIA;EACAC,OAAOA,CAAA;IACL,OAAO;MACLC,cAAc,EAAE;QACdC,QAAQ,EAAE;UACRL,IAAI,EAAE,IAAI,CAACA;SACZ;QACDC,EAAE,EAAEX,cAAc,CAACgB,GAAG,CAAC,IAAI,CAACL,EAAE,CAAC;QAC/BM,KAAK,EAAEnB,QAAA,CAAAoB,MAAM,CAACC,WAAW,CAAC,IAAI,CAACP,GAAG,EAAE,IAAI,CAACF,IAAI;;KAEhD;EACH;;AAlCFhB,OAAA,CAAAc,cAAA,GAAAA,cAAA;AAqCA;;;;;;;;AAQA,MAAMJ,eAAgB,SAAQG,YAAY;EAIxC;;;;;EAKAE,YAAYN,OAAuB,EAAEQ,EAAqB;IACxD,KAAK,EAAE;IACP,IAAI,CAACR,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACQ,EAAE,GAAGA,EAAE;EACd;EAEA;;;;EAIA;EACAE,OAAOA,CAAA;IACL,OAAO;MACLO,eAAe,EAAE;QACfjB,OAAO,EAAE,IAAI,CAACA,OAAO,CAACkB,GAAG,CAACC,MAAM,IAAIA,MAAM,CAACT,OAAO,EAAE,CAAC;QACrDF,EAAE,EAAE,IAAI,CAACA;;KAEZ;EACH;;AAGF,SAAgBd,QAAQA,CAACyB,MAAW;EAClC,OAAOA,MAAM,YAAYf,YAAY;AACvC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}